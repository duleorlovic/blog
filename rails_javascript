guide rendering:
response can be: render, redirect, or head.
convention over configuration:
processing #action_name as HTML renders action_name.html template (if there has not been a call to render method). ActionController::Base#render methon can set up template or partial to be rendered as text, json, xml, js (contenti-type) and set the response code (:status => :ok)
render "edit" #or :edit  will change template beloging to same controller, or render "products/edit" another. It should be explicited with parameter render template: "edit"
render plain: "OK"
render xml: @product #automatically calls .to_xml
render json: @product #no need for .to_json
render js: "alert();" will set content-type MIME text/javascript
parameters :content_type => "text/html" or "application/json" "application/xml", "application/rss"
parameter :layout => 'special_layout' or false
parameter :location => photo_url(@photo) sets HTTP locatio header
parameter :status => :ok is 200, :internal_server_error 500


View render method has nothing to do with controller render method. render 'menu' will render _menu.html. render 'product/edit' will search for product/_edit.html. 
Each partial has local variable with the same name as partial and you can pass an object into it with :object
<%= render partial: "customer", object: @new_customer %>
or if it is an instance of Customer model shorthand is
<%= render @customer %> which will use _customer.html.erb with local object customer
<%= render @customers || "There is nothing" %> for collections, each class model will render _model.html partial with local objects customer. Also the all @objects are accessible but default local object should be enough. If it is not, then
<%= render locals: {title: "aa"} %>

We will use this property that render @question, pass as local object question. 


delovi nekog objekta mogu da se menjaju, show_title.html, edit_title.html koji sadrze <div id='holder-show-title'>, pa onda edit_title.js radi $('#holder-show-title').replaceWith('<%= j render 'edit_title' %>');

ti delovi mogu da idu na isti update, ako se koristi hidden field ali onda mora i renderuje posebno

kada se u .js template poziva render "partial", mora se staviti oznaka, render partial: "partial"


ukoliko imate neki event.listener na objekat koji se potpuno zamenio, onda nece raditi. treba postaviti even listener na neki parent i delegirati ga na taj element, npr.
$('.wrap').on('click','a[data-toggle=collapse]', function() {
  $(this).siblings('posto na novim objektima nisu vezani event listeneri


jquery radi quoting npr https://github.com/jquery/jquery/blob/90b43de21296cf59af7dd37c49c1a9a4f8483f68/src/sizzle/dist/sizzle.js#L95

<%= ubacuje &quot; &lt; i stale karakter u html escaping, \n /b ostaju isti
<%= j javacsript render escapuje /, ', " menja sa \/, \', \"


ako definisemo respond_to onda radi format.js bez layouta (ako nadje ili ako ne nadje onda radi respond with html as HTML).
ako ne definisemo respond_to onda trazi js i mora biti bez novi redova, 

Form errors.

Form use data-model to determine how to wrap error div. We need to find input[name='model']['title'].

I putted all event listiners inside a function ready(), and call that function when $(document).ready(ready);
If I used $(document).on('page:load', ready); I will have multiple (identical) events attached to same object. That is another reason why we should bind all events to document.

Since we use remote-true, we should add data: { disable_with: "Adding" } for all links and button that are not idempotent actions (idempotent actions are ones that you can apply them as many times as  you want without worries for example abs(abs(abs(x))) ).


flash messages
http://stackoverflow.com/questions/21032465/rails-doesnt-display-flash-messages-after-ajax-call
we should discard flash object on ajax request otherwise it will show up on next page reload


we send alert and notice with X-Message-Alert.

flash are rendered usually on change (PUT, PATCH) requests, but not on form submit because forms are wrapped with classes errors, and usually on some index pages (where we change some of the object property and wants to stay on the same page).
