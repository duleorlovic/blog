---
layout: post
tags: ionic
---

# Start from blank

## Android SDK

Download [Android
SDK](http://developer.android.com/sdk/installing/index.html?pkg=tools) and
export path in your `.bashrc` like `export
ANDROID_HOME=/home/orlovic/Android/Sdk/`.

Make `android`, `adb` and `emulator` accessible with:

~~~
sudo ln -s /home/orlovic/Android/Sdk/platform-tools/adb /usr/bin/
echo 'export PATH="$PATH:$HOME/orlovic/Android/Sdk/tools"' >> ~/.bashrc
# or
sudo ln -s /home/orlovic/Android/Sdk/tools/android /usr/bin/

android avd
emulator @n4 &
~~~

[Configure USB
access](http://source.android.com/source/initializing.html#configuring-usb-access) with this command:

`wget -S -O - http://source.android.com/source/51-android.rules | sed
"s/<username>/$USER/" | sudo tee >/dev/null /etc/udev/rules.d/51-android.rules;
sudo udevadm control --reload-rules`

~~~
lsusb # find your model
sudo vi /etc/udev/rules.d/51-android.rules
# add your model with idVendor and idProduct
sudo udevadm control --reload-rules
# plug again your device
# on device settings enable USB Debugging so `adb devices` show `device`
# on Android > 4.2.2 usb debuggins is hidden, so go Settings -> About Phone ->
# Build number than tap 5 times
# instead of `offline`
adb kill-server
adb devices
~~~

## Ionic

Download ionic and cordova

~~~
npm install -g cordova ionic
ionic start myIonic blank
cd myIonic
git init . && git add . && git commit -m "ionic start"

ionic platform add android
cordova plugin add ionic-plugin-keyboard # this is default plugin
# prefer ionic CLI to cordova CLI because is adds to package.json
ionic plugin add cordova-plugin-camera
ionic state save # others pull the code, sync with `ionic state restore`
ionic upload
git add . && git commit -m "ionic add android && ionic upload"
ionic share some@email.com

ionic serve # to see it in browser
ionic emulate -lcs # to run in emulator with live reload and logs
ionic run --target 123123 # to run on device, find device name with adb devices
~~~

### Setup sass

~~~
ionic setup sass
echo '# ionic upload
.io-config.json
# when using /scss css is autogenerated
www/css/
# bower packages
www/lib/
# cordova js is managed by ionic
hooks/
' >> .gitignore
git rm www/css -r
git add . && git commit -m "ionic setup sass"
~~~

### Setup coffee script

~~~
echo '# coffee script is all appended to one file
www/js/_coffeescript_build.js' >> .gitignore
sed -i gulpfile.js -e '/var sass/a \
var coffee = require("gulp-coffee");'
sed -i gulpfile.js -e '/var paths/a \
  coffee: ["./www/**/*.coffee"],'
sed -i gulpfile.js -e '/gulp.task..watch/a \
  gulp.watch(paths.coffee, ["coffee"]),'
cat >> gulpfile.js << 'HERE_DOC'
gulp.task('coffee', function(done) {
  gulp.src(paths.coffee)
  .pipe(coffee({bare: true})
  .on('error', gutil.log.bind(gutil, 'Coffee Error')))
  .pipe(concat('_coffeescript_build.js'))
  .pipe(gulp.dest('./www/js'))
  .on('end', done)
})
HERE_DOC
# add to package.json
npm install gulp-coffee --save
sed -i www/index.html -e '/<\/head>/i \
    <!-- coffe script is bundled to this file -->\
    <script src="js/_coffeescript_build.js"></script>'
touch www/js/_cofeescript_build.js
git add . && git commit -m "Enable coffee script"
~~~

Some version of node have problem starting emulator, so you can start manually
`emulator @n4 &`

Generate
[icons](http://ionicframework.com/blog/automating-icons-and-splash-screens/) with `ionic resources`

# Installing Android ADB

For `INSTALL_FAILED_OLDER_SDK` you need to lower sdk version requirement.
Ionic drop support below [SDK
14](http://stackoverflow.com/questions/30203266/cordova-build-release-android-always-picks-the-highest-api-level)
so in your `config.xml` put

~~~
  <preference name="android-minSdkVersion" value="14"/>
~~~

# VirtualBox and Android Emulator

If you want to emulate and get this error

~~~
ioctl(KVM_CREATE_VM) failed: Device or resource busy
ko:failed to initialize KVM
~~~

it's because VirtualBox is running and using kvm. You can edit emulator
`tools/android --avd` to use some other than x86, for example `armeabi-v7a`. Then they can work in the same time `ionic serve --target myArmeabiDevice` [l](http://stackoverflow.com/questions/16168799/android-emulator-and-virtualbox-cannot-run-at-same-time).
But *Intel Atom (x86)* is much faster. Also enable *Emulation Options:* *Use
Host GPU*.

# Debug

You can see android device logs with grep (key with space does not work)

~~~
adb -d logcat | grep 'Web Console' # -d is for device only
adb logcat | grep 'chromium\|Web Console' # new androids use chromium
adb install -r platforms/android/build/outputs/apk/android-debug.apk
~~~

* Failure [INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES], Fix remove old
  application.

# Deploy production

If you don't have a key, you should generate and always use that. If app is
already installed on a phone with different keys, user can not update it (he
needs to remove the app and than install again).

~~~
keytool -genkey -v -keystore ~/config/keys/my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000
~~~

You should remove all unnecessary stuff for [publishing](http://ionicframework.com/docs/guide/publishing.html).

~~~
cordova build --release android
# this will generate platforms/android/build/outputs/apk/android-release-unsigned.apk
jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore ~/config/keys/my-release-key.keystore platforms/android/build/outputs/apk/android-release-unsigned.apk alias_name # this change the file inline
zipalign -v 4 platforms/android/build/outputs/apk/android-release-unsigned.apk my_app.apk
~~~

You can use
[ionic_publish](https://github.com/duleorlovic/config/blob/master/my_bashrc.sh)
my bash function.


# Old browsers

Since old phones without Chromium suffer from pool javascript performance, maybe
[crosswalk](https://crosswalk-project.org/) could help.

# NgCordova

When you use wrapper than you need to install
[ngCordova](http://ngcordova.com/docs/install/)

~~~
bower install ngCordova
sed -i www/index.html -e '/<\/head>/i \
    <!-- ngCordova that is installed using bower -->\
    <script src="lib/ngCordova/dist/ng-cordova.js"></script>'
~~~


Angular [$log](https://docs.angularjs.org/api/ng/provider/$logProvider)
service `$log.debug(myObj);` can be used and disabled easilly in
app.config.js with `$logProvider.debugEnabled(false)` so only `$log.error()`
or `$log.info()` will be shown (don't know how to disable those two).

If you see `[object Object]` (probably old angular version) than you can use
`$log.debug(JSON.stringify(response.data));`

# Notifications

I would rather user android toast instead of ngMessages.
[Toast-PhoneGap-Plugin](https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin)
source for cordova-plugin-x-toast,
[$cordovaToast](http://ngcordova.com/docs/plugins/toast/) wrapper.

~~~
cordova plugin add https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin.git
ionic state save
cat >> www/js/services/notify.service.coffee << 'HERE_DOC'
angular.module('starter')
  .service 'notifyService', ($cordovaToast, $log) ->
    prepareMessage = (message) ->
      text = message;
      if typeof message == 'object'
        text = JSON.stringify(message)
      text
    this.toast = (message) ->
      text = prepareMessage(message)
      if window.plugins && window.plugins.toast
        $cordovaToast.show text, 'long', 'center'
      else
        alert text
    this.log = (message) ->
      text = prepareMessage(message)
      $log.debug text
    return
HERE_DOC
~~~

# Content security policy

[http://content-security-policy.com/](http://content-security-policy.com/)

~~~
<html>
  <head>
    <meta http-equiv="Content-Security-Policy" content="
    default-src * 'self' data: gap: https://ssl.gstatic.com;
    style-src 'self' 'unsafe-inline';
    script-src * 'unsafe-inline';
    media-src *;
    ">
  </head>
</html>
~~~

* ui-router can add `resolve: { auth: function($auth) { return
  $auth.validateUser() } }`, it will hang if user is not logged in. In ionic
  screens are nested states so it will be blank page. Better is to use
  completelly different state and resolve auth on abstract tabs
* ui-router for subpages should be on same level as page, since we render them
  on whole `<ion-nav-view>`
* [rack-cors](https://github.com/cyu/rack-cors) use all actions `[:get, :post,
  :delete, :put, :patch, :options, :head]`. I have strange error that all
  requests were *OPTIONS* instead of *POST*.

# Ready

For cordova plugins you should wait for ready and test if it exists.

~~~
angular.module 'starter'
  .controller 'DashCtrl', ($scope, $ionicPlatform) ->
    $ionicPlatform.ready ->
      window.SignalStrength && window.SignalStrength.dbm (db) ->
        $scope.signal = db
~~~

# Auth

[ng-token-auth#validateUser](https://github.com/lynndylanhurley/ng-token-auth#authvalidateuser)
is called on page load so user does not need to log in again.

Token can be save to localStorage to work on device and emulator.
I've not succeed to have working auth in browser for ionic.

# if something is not working, wipe `node_modules` and run `npm install`

LocalStorage (or ng-token-auth) does not work with `emulator -l` livereload, so
don't use `-l`.

Do not check if user is valid with `angular.equals($scope.user, {})` in
controller since `validateUser` returns promise that will resolve after
controller has been initialized.
Better is to

~~~
// login.controller.js
  $auth.validateUser()
  .then(function() {
    $state.go('tab.dashboard');
  });
~~~

Or the best approach is to store all login state redirections in run

~~~

~~~

Run MAC with those `-x -v -f acpi=off PCIRootUID=1 GraphicsEnabler=No `
[link](http://www.tonymacx86.com/snow-leopard-desktop-support/65465-experiencing-kernel-panic-initial-boot.html)


# Jade

Adding jade with: `npm install gulp-jade --save-dev`. Than

~~~
# here we will store html
echo www/templates >> .gitignore
sed -i ionic.project -e '/gulpSartupTasks/a "jade",'
~~~

~~~
# gulpfile.js
var jade = require('gulp-jade');

var paths = {
  sass: ['./scss/**/*.scss'],
  jade: ['./www/**/*.jade']
};

gulp.task('default', ['sass', 'jade']);

gulp.task('jade', function (done) {
  return gulp.src(paths.jade)
    .pipe(jade())
    .pipe(gulp.dest('www/templates/'));
});
gulp.task('watch', function() {
  gulp.watch(paths.sass, ['sass']);
  gulp.watch(paths.jade, ['jade']);
});
~~~

<http://yeghishe.github.io/2015/08/13/my-gulp-files-ionic-app.html>

# Tips

* to find ionic version run in browser and type in console `ionic.version` (or
  grep `bower.json` file). `ionic -v` will give you ionic CLI version which is
  not related to ionic version
* to clean files that are inside www but git ignored, you can `git clean -xdf
  www` but you need to `npm install && bower install`
