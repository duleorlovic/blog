---
layout: post
tags: ionic
---

# Setup

## Android SDK

Download [Android
SDK](http://developer.android.com/sdk/installing/index.html?pkg=tools) and
export path in your `.bashrc` like `export
ANDROID_HOME=/home/orlovic/Android/Sdk/`.

Make `android`, `adb` and `emulator` accessible with:

~~~
sudo ln -s /home/orlovic/Android/Sdk/platform-tools/adb /usr/bin/
echo 'export PATH="$PATH:$HOME/orlovic/Android/Sdk/tools"' >> ~/.bashrc
# or
sudo ln -s /home/orlovic/Android/Sdk/tools/android /usr/bin/

android avd
emulator @n4 &
~~~

[Configure USB
access](http://source.android.com/source/initializing.html#configuring-usb-access) with this command:

`wget -S -O - http://source.android.com/source/51-android.rules | sed
"s/<username>/$USER/" | sudo tee >/dev/null /etc/udev/rules.d/51-android.rules;
sudo udevadm control --reload-rules`

~~~
lsusb # find your model
sudo vi /etc/udev/rules.d/51-android.rules
# add your model with idVendor and idProduct
sudo udevadm control --reload-rules
# plug again your device
# on device settings enable USB Debugging so `adb devices` show `device`
# on Android > 4.2.2 usb debuggins is hidden, so go Settings -> About Phone ->
# Build number then tap 5 times
# instead of `offline`
adb kill-server
adb devices
~~~

## Download Ionic

Download ionic and cordova

~~~
npm install -g cordova ionic
ionic start myIonic blank
cd myIonic
cat >> .gitignore << HERE_DOC
# from command ionic upload
.io-config.json
# bower packages
www/lib/
# cordova js is managed by ionic
hooks/
HERE_DOC
git init . && git add . && git commit -m "ionic start"

ionic platform add android
cordova plugin add ionic-plugin-keyboard # this is default plugin
# prefer ionic CLI to cordova CLI because it adds to package.json
ionic plugin add cordova-plugin-camera
ionic state save # others pull the code, sync with `ionic state restore`
ionic upload
git add . && git commit -m "ionic add android && ionic upload"
ionic share some@email.com

ionic serve # to see it in browser
ionic emulate -lcs # to run in emulator with live reload and logs
ionic run --target 123123 # to run on device, find device name with adb devices
ionic serve --nobrowser # it will not open new browser, so you can use existing
~~~

## Sass

Note that sass is already in  gulpfile.

~~~
ionic setup sass
cat >> .gitignore << HERE_DOC
# when using /scss css is autogenerated
www/css/
HERE_DOC
git rm www/css -r
git add . && git commit -m "ionic setup sass"
~~~

## Coffeescript

~~~
cat >> .gitignore << HERE_DOC
# coffee script files are all appended to one file
www/js/_coffeescript_build.js
HERE_DOC
sed -i ionic.project -e '/gulpSartupTasks/a "coffee",'
sed -i gulpfile.js -e '/var sass/a \
var coffee = require("gulp-coffee");'
sed -i gulpfile.js -e '/var paths/a \
  coffee: ["./www/**/*.coffee"],'
sed -i gulpfile.js -e '/gulp.task..watch/a \
  gulp.watch(paths.coffee, ["coffee"]),'
cat >> gulpfile.js << 'HERE_DOC'

gulp.task('coffee', function(done) {
  gulp.src(paths.coffee)
  .pipe(coffee({bare: true}).on('error', gutil.log))
  .pipe(concat('_coffeescript_build.js'))
  .pipe(gulp.dest('./www/js'))
  .on('end', done);
});
HERE_DOC
# add to package.json
npm install gulp-coffee --save
sed -i www/index.html -e '/<\/head>/i \
    <!-- coffe script is bundled to this file -->\
    <script src="js/_coffeescript_build.js"></script>'
git add . && git commit -m "Enable coffee script"
touch www/js/_coffeescript_build.js # just to not raise file not found error
~~~

<del>Note that it does not work nice on first run `ionic serve` , you need to
update some coffee file to get pipe to reload.</del> 
<del>Note that we added coffee to ionic.project gulpStartupTasks, but sometimes
browser cache will prevent some changes to show up, so try to reload the
page.</del>

When I add dependency for default task, than javascript changes are not
recognized, sometimes... wip

~~~
// gulpfile.js
gulp.task('default', ['sass', 'coffee', 'jade']);
~~~

## Jade

Adding jade with: `npm install gulp-jade --save-dev`. Than

~~~
cat >> .gitignore << HERE_DOC
# here we will build html from jade
www/jade_build
HERE_DOC
sed -i ionic.project -e '/gulpSartupTasks/a "jade",'
sed -i gulpfile.js -e '/var sass/a \
var jade = require("gulp-jade");'
sed -i gulpfile.js -e '/var paths/a \
  jade: ["./www/**/*.jade"],'
sed -i gulpfile.js -e '/gulp.task..watch/a \
  gulp.watch(paths.jade, ["jade"]),'
cat >> gulpfile.js << 'HERE_DOC'

gulp.task('jade', function (done) {
  return gulp.src(paths.jade)
    .pipe(jade())
    .pipe(gulp.dest('www/jade_build/'));
});
HERE_DOC
git commit -am "Enable jade"
# gulpfile.js
gulp.task('default', ['sass', 'jade']);
~~~

You can convert [all html files to jade]({{ site.baseurl }}
{% post_url 2016-04-05-javascript-coffeescript-tips %} #tocAnchor-1-5) but please
check them. `index.html` should be in html format since that path `www` is
fixed.

Also note that template path should be prefixed with `jade_build` in your router
file, for example `templateUrl: 'jade_build/js/dashboard/dashboard.html'` Check
example  of [login controller for ionic]({{ site.base_url }}
{% post_url 2015-12-20-devise-oauth-angular %}#tocAnchor-1-6-3)

# Adding CONSTANT for SERVER_URL

You probably need to change api url from command line, since ionic does not pass
arguments to gulp command, we need to use env variables (note that they must be
prefix - before actual command).

~~~
SERVER_URL=my-domain.dev:3001 ionic serve 
SERVER_URL=production ionic emulate
# note that ionic run will not rebuild, it will just install latest configured
# apk
~~~


~~~
cat >> www/js/app.constant.coffee << HERE_DOC
PRODUCTION_SERVER_URL = 'https://www.trk.in.rs'
STAGING_SERVER_URL = 'http://trk.herokuapp.com'
LOCAL_SERVER_URL = 'http://mylocationsubdomain.my-domain.dev:3001'
angular.module 'starter'
  .constant 'CONSTANT',
    SERVER_URL: STAGING_SERVER_URL
HERE_DOC

npm install gulp-if gulp-replace --save-dev
sed -i gulpfile.js -e '/shelljs/a \
var replace = require("gulp-replace");\
var gulpif = require("gulp-if");\
\
var serverUrl = false; // default is what is defined in constants.coffee\
if (process.env.SERVER_URL == "production") {\
  serverUrl = "PRODUCTION_SERVER_URL";\
  console.log("Using production PRODUCTION_SERVER_URL");\
} else if (process.env.SERVER_URL) {\
  serverUrl = "\\\"http://" + process.env.SERVER_URL + "\\\"";\
  console.log("Using SERVER_URL=" + process.env.SERVER_URL);\
} else {\
  console.log("Using default SERVER_URL");\
}'

sed -i gulpfile.js -e '/gulp.src(paths.coffee/a \
  .pipe(gulpif(!!serverUrl, replace(/SERVER_URL: \\w*SERVER_URL/g, "SERVER_URL: " + serverUrl)))'
~~~

# Adding other packages, for example RailsResource

When you add using `bower install angularjs-rails-resource --save` you need also to include it in `www/index.html` (it can be before or after app.js) and you need to declare dependency in `www/app.js`

~~~
    <!-- Rails Resource
    https://github.com/FineLinePrototyping/angularjs-rails-resource -->
    <script src="lib/angularjs-rails-resource/angularjs-rails-resource.js.min"></script>
~~~

Checkout [adding angular-devise authentication]({{ site.base_url }}
{% post_url 2015-12-20-devise-oauth-angular %}#tocAnchor-1-6-3)

# Adding tabs templates

This patch was generated with `git diff > patchfile` and can be applied with
`patch -p1 < patchfile`

You can create different tabs for different users. Just `$state.go
'customer-tabs.dashboard'` after customer logs in. Customer tabs are the same as
user tabs (abstract state, controller, template).

~~~
diff --git a/mobileApp/www/index.html b/mobileApp/www/index.html
index c0d6225..faa3c73 100644
--- a/mobileApp/www/index.html
+++ b/mobileApp/www/index.html
@@ -22,12 +22,18 @@
   </head>
   <body ng-app="starter">
 
-    <ion-pane>
-      <ion-header-bar class="bar-stable">
-        <h1 class="title">Ionic Blank Starter</h1>
-      </ion-header-bar>
-      <ion-content>
-      </ion-content>
-    </ion-pane>
+    <!--
+      The nav bar that will be updated as we navigate between views.
+    -->
+    <ion-nav-bar class="bar-stable">
+      <ion-nav-back-button>
+      </ion-nav-back-button>
+    </ion-nav-bar>
+    <!--
+      The views will be rendered in the <ion-nav-view> directive below
+      Templates are in the /templates folder (but you could also
+      have templates inline in this html file if you'd like).
+    -->
+    <ion-nav-view></ion-nav-view>
   </body>
 </html>
diff --git a/mobileApp/www/js/_coffeescript_build.js b/mobileApp/www/js/_coffeescript_build.js
deleted file mode 100644
index e69de29..0000000
diff --git a/mobileApp/www/js/account/account.controller.coffee b/mobileApp/www/js/account/account.controller.coffee
new file mode 100644
index 0000000..ddcd815
--- /dev/null
+++ b/mobileApp/www/js/account/account.controller.coffee
@@ -0,0 +1,3 @@
+angular.module 'starter'
+  .controller 'AccountController', ->
+    vm = this
diff --git a/mobileApp/www/js/account/account.html b/mobileApp/www/js/account/account.html
new file mode 100644
index 0000000..2e72f67
--- /dev/null
+++ b/mobileApp/www/js/account/account.html
@@ -0,0 +1,9 @@
+<ion-view view-title="Account">
+  <ion-content>
+    <ion-list>
+    <ion-toggle  ng-model="settings.enableFriends">
+        Enable Friends
+    </ion-toggle>
+    </ion-list>
+  </ion-content>
+</ion-view>
diff --git a/mobileApp/www/js/app.config.coffee b/mobileApp/www/js/app.config.coffee
new file mode 100644
index 0000000..ba02b6e
--- /dev/null
+++ b/mobileApp/www/js/app.config.coffee
@@ -0,0 +1,37 @@
+angular.module 'starter'
+  .config ($stateProvider, $urlRouterProvider) ->
+    $stateProvider
+      .state 'tab',
+        url: '/tab'
+        abstract: true
+        templateUrl: 'js/tabs/tabs.html'
+      .state 'tab.dashboard',
+        url: '/dashboard'
+        views:
+          'tab-dashboard':
+            templateUrl: 'js/dashboard/dashboard.html'
+            controller: 'DashboardController'
+            controllerAs: 'vm'
+    .state 'tab.chats',
+        url: '/chats'
+        views:
+          'tab-chats':
+            templateUrl: 'js/chats/chats.html'
+            controller: 'ChatsController'
+            controllerAs: 'vm'
+      .state 'tab.chat-detail',
+        url: '/chats/:chatId'
+        views:
+          'tab-chats':
+            templateUrl: 'js/chats/chatDetails.html'
+            controller: 'ChatDetailsController'
+            controllerAs: 'vm'
+      .state 'tab.account',
+        url: '/account'
+        views:
+          'tab-account':
+            templateUrl: 'js/account/account.html'
+            controller: 'AccountController'
+            controllerAs: 'vm'
+
+    $urlRouterProvider.otherwise '/tab/dashboard'
diff --git a/mobileApp/www/js/chats/chatDetails.controller.coffee b/mobileApp/www/js/chats/chatDetails.controller.coffee
new file mode 100644
index 0000000..f7768da
--- /dev/null
+++ b/mobileApp/www/js/chats/chatDetails.controller.coffee
@@ -0,0 +1,4 @@
+angular.module 'starter'
+  .controller 'ChatDetailsController', ($stateParams, Chats) ->
+    vm = this
+    vm.chat = Chats.get $stateParams.chatId
diff --git a/mobileApp/www/js/chats/chatDetails.html b/mobileApp/www/js/chats/chatDetails.html
new file mode 100644
index 0000000..9ea8222
--- /dev/null
+++ b/mobileApp/www/js/chats/chatDetails.html
@@ -0,0 +1,8 @@
+<ion-view view-title="{{chat.name}}">
+  <ion-content class="padding">
+    <img ng-src="{{chat.face}}" style="width: 64px; height: 64px">
+    <p>
+      {{chat.lastText}}
+    </p>
+  </ion-content>
+</ion-view>
diff --git a/mobileApp/www/js/chats/chats.controller.coffee b/mobileApp/www/js/chats/chats.controller.coffee
new file mode 100644
index 0000000..029eedc
--- /dev/null
+++ b/mobileApp/www/js/chats/chats.controller.coffee
@@ -0,0 +1,15 @@
+angular.module 'starter'
+  .controller 'ChatsController', (Chats) ->
+    # With the new view caching in Ionic, Controllers are only called
+    # when they are recreated or on app start, instead of every page change.
+    # To listen for when this page is active (for example, to refresh data),
+    # listen for the $ionicView.enter event:
+    #
+    #$scope.$on('$ionicView.enter', function(e) {
+    #});
+
+    vm = this
+    vm.chats = Chats.all()
+    vm.remove = (chat) ->
+      Chats.remove(chat)
+    console.log vm.chats
diff --git a/mobileApp/www/js/chats/chats.html b/mobileApp/www/js/chats/chats.html
new file mode 100644
index 0000000..89ad519
--- /dev/null
+++ b/mobileApp/www/js/chats/chats.html
@@ -0,0 +1,17 @@
+<ion-view view-title="Chats">
+  <ion-content>
+    <ion-list>
+      <ion-item class="item-remove-animate item-avatar item-icon-right"
+        ng-repeat="chat in vm.chats" type="item-text-wrap" href="#/tab/chats/{{chat.id}}">
+        <img ng-src="{{chat.face}}">
+        <h2>{{chat.name}}</h2>
+        <p>{{chat.lastText}}</p>
+        <i class="icon ion-chevron-right icon-accessory"></i>
+
+        <ion-option-button class="button-assertive" ng-click="vm.remove(chat)">
+          Delete
+        </ion-option-button>
+      </ion-item>
+    </ion-list>
+  </ion-content>
+</ion-view>
diff --git a/mobileApp/www/js/dashboard/dashboard.coffee b/mobileApp/www/js/dashboard/dashboard.coffee
new file mode 100644
index 0000000..520b24e
--- /dev/null
+++ b/mobileApp/www/js/dashboard/dashboard.coffee
@@ -0,0 +1,4 @@
+angular.module 'starter'
+  .controller 'DashboardController', ->
+    vm = this
+
diff --git a/mobileApp/www/js/dashboard/dashboard.html b/mobileApp/www/js/dashboard/dashboard.html
new file mode 100644
index 0000000..88c3906
--- /dev/null
+++ b/mobileApp/www/js/dashboard/dashboard.html
@@ -0,0 +1,5 @@
+<ion-view view-title="Dashboard">
+  <ion-content class="padding">
+    <h2>Welcome to Ionic</h2>
+  </ion-content>
+</ion-view>
diff --git a/mobileApp/www/js/resources/chats.resource.coffee b/mobileApp/www/js/resources/chats.resource.coffee
new file mode 100644
index 0000000..4aa4755
--- /dev/null
+++ b/mobileApp/www/js/resources/chats.resource.coffee
@@ -0,0 +1,33 @@
+angular.module('starter')
+  .factory 'Chats', ->
+    # Might use a resource here that returns a JSON array
+    # Some fake testing data
+    chats = [
+      {
+        id: 0
+        name: 'Ben Sparrow'
+        lastText: 'You on your way?'
+        face: 'img/ben.png'
+      }
+      {
+        id: 1
+        name: 'Max Lynx'
+        lastText: 'Hey, it\'s me'
+        face: 'img/max.png'
+      }
+    ]
+    {
+      all: ->
+        chats
+      remove: (chat) ->
+        chats.splice chats.indexOf(chat), 1
+        return
+      get: (chatId) ->
+        i = 0
+        while i < chats.length
+          if chats[i].id == parseInt(chatId)
+            return chats[i]
+          i++
+        null
+
+    }
diff --git a/mobileApp/www/js/tabs/tabs.html b/mobileApp/www/js/tabs/tabs.html
new file mode 100644
index 0000000..8fb1726
--- /dev/null
+++ b/mobileApp/www/js/tabs/tabs.html
@@ -0,0 +1,25 @@
+<!--
+Create tabs with an icon and label, using the tabs-positive style.
+Each tab's child <ion-nav-view> directive will have its own
+navigation history that also transitions its views in and out.
+-->
+<ion-tabs class="tabs-icon-top tabs-color-active-positive">
+
+  <!-- Dashboard Tab -->
+  <ion-tab title="Status" icon-off="ion-ios-pulse"
+    icon-on="ion-ios-pulse-strong" href="#/tab/dashboard">
+    <ion-nav-view name="tab-dashboard"></ion-nav-view>
+  </ion-tab>
+
+  <!-- Chats Tab -->
+  <ion-tab title="Chats" icon-off="ion-ios-chatboxes-outline" icon-on="ion-ios-chatboxes" href="#/tab/chats">
+    <ion-nav-view name="tab-chats"></ion-nav-view>
+  </ion-tab>
+
+  <!-- Account Tab -->
+  <ion-tab title="Account" icon-off="ion-ios-gear-outline" icon-on="ion-ios-gear" href="#/tab/account">
+    <ion-nav-view name="tab-account"></ion-nav-view>
+  </ion-tab>
+
+
+</ion-tabs>
~~~

Some version of node have problem starting emulator, so you can start manually
`emulator @n4 &`

Generate
[icons](http://ionicframework.com/blog/automating-icons-and-splash-screens/)
with `ionic resources`. If you update icons than you should run with option
`--ignore-cache` so it does not use cached tmp files `ionic resources
--ignore-cache` (maybe size is too big).

# Common errors

For `INSTALL_FAILED_OLDER_SDK` you need to lower sdk version requirement.
Ionic drop support below [SDK
14](http://stackoverflow.com/questions/30203266/cordova-build-release-android-always-picks-the-highest-api-level)
so in your `config.xml` put

~~~
  <preference name="android-minSdkVersion" value="14"/>
~~~

On `adb install my_app.apk` you could get `Failure
[INSTALL_FAILED_ALREADY_EXISTS] rm failed for -f, No such file or directory`.
Or Failure [INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES] or [INSTALL_FAILED_UPDATE_INCOMPATIBLE]

Solution is to remove old application.

  ~~~
  ~/Android/Sdk/build-tools/21.1.2/aapt dump badging my-app-debug.apk  | grep package # to find package name
  adb uninstall package-name # or my helper ionic_find_package_name
  ~~~



# VirtualBox and Android Emulator

If you want to emulate and get this error

~~~
ioctl(KVM_CREATE_VM) failed: Device or resource busy
ko:failed to initialize KVM
~~~

it's because VirtualBox is running and using kvm. You can edit emulator
`tools/android --avd` to use some other than x86, for example `armeabi-v7a`. Then they can work in the same time `ionic serve --target myArmeabiDevice` [l](http://stackoverflow.com/questions/16168799/android-emulator-and-virtualbox-cannot-run-at-same-time).
But *Intel Atom (x86)* is much faster. Also enable *Emulation Options:* *Use
Host GPU*.

# Debug with ADB

You can see android device logs with grep (key with space does not work)

~~~
adb help 2>&1 | less -R
# option needs to be before other arguments
adb -e shell
adb -d logcat | grep 'Web Console' # -d is for device only
adb logcat | grep 'chromium\|Web Console' # new androids use chromium
adb install -r platforms/android/build/outputs/apk/android-debug.apk
# adb help will show you that -r means replace

adb -s emulator-5556 install my-app.apk # if you have two emulators you can
# specify which emulator
adb -d install my-app.apk # directs to only connected usb device

telnet localhost 5554
  geo fix 19 45 # to fix gps location, first is longitude than latitude
~~~

# Android dns for local server

On Android emulator `127.0.0.1` will not point to your machine! Also your
`/etc/hosts` file will not be used. There are sevelar solutions

* change hosts file on android emulator, for example `n4`
  [link](http://www.bradcurtis.com/hosts-files-and-the-google-android-emulator/)

  ~~~
  emulator -avd n4 -partition-size 512 &
  adb remount
  adb pull /system/etc/hosts .
  echo "192.168.2.4 mydomain.dev" >> hosts
  adb push hosts /system/etc
  adb shell cat /etc/hosts
  ~~~

  This will last only until you reboot emulator. If you want to make it
  permanent, copy system.img to system-qemu.img, and than make changes that you
  want to be permanent. You also need to increase partition-size and remount
  before any changes.

  ~~~
  cp ~/Android/Sdk/system-images/android-17/default/x86/system.img ~/.android/avd/n4.avd/system-qemu.img
  ~~~

# Deploy production

If you don't have a key, you should generate and always use that. If app is
already installed on a phone with different keys, user can not update it (he
needs to remove the app and than install again).

~~~
keytool -genkey -v -keystore ~/config/keys/my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000
~~~

You should remove all unnecessary stuff for
[publishing](http://ionicframework.com/docs/guide/publishing.html) like `cordova
plugin rm cordova-plugin-console`

Also you need to update `config.xml` to customize your project.

* use your reverse domain for widget id: `id=rs.in.trk.123`
* customize name, description and author

~~~
cordova build --release android
# this will generate platforms/android/build/outputs/apk/android-release-unsigned.apk
jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore ~/config/keys/my-release-key.keystore platforms/android/build/outputs/apk/android-release-unsigned.apk alias_name # this change the file inline
zipalign -v 4 platforms/android/build/outputs/apk/android-release-unsigned.apk my_app.apk
~~~

You can use
[ionic_publish](https://github.com/duleorlovic/config/blob/master/my_bashrc.sh)
my bash function.

When you want to publish another release, you need to update `config.xml`
version attribute (do not touch id attribute).


# Old browsers

Since old phones without Chromium suffer from poor javascript performance, maybe
[crosswalk](https://crosswalk-project.org/) could help.

# NgCordova

When you use wrapper aroung some plugin than you need to install
[ngCordova](http://ngcordova.com/docs/install/)

~~~
bower install ngCordova
sed -i www/index.html -e '/<\/head>/i \
    <!-- ngCordova that is installed using bower -->\
    <script src="lib/ngCordova/dist/ng-cordova.js"></script>'
~~~


Angular [$log](https://docs.angularjs.org/api/ng/provider/$logProvider)
service `$log.debug(myObj);` can be used and disabled easilly in
app.config.js with `$logProvider.debugEnabled(false)` so only `$log.error()`
or `$log.info()` will be shown (don't know how to disable those two).

If you see `[object Object]` (probably old angular version) than you can use
`$log.debug(JSON.stringify(response.data));`. Better way is to create
`window.log`

~~~
# www/js/app.js
window.old_console = window.console;
window.console = (function() {
  var console = {};
  console.log = function(message) {
    if (typeof(message) == 'object')
      message = JSON.stringify(message);
    window.old_console.log(message);
  };
  return console;
})();
~~~

# Notifications

I would rather user android toast instead of ngMessages.
[Toast-PhoneGap-Plugin](https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin)
is a source for cordova-plugin-x-toast.
We could use wrapper [$cordovaToast](http://ngcordova.com/docs/plugins/toast/),
but it is not neccessary.

~~~
cordova plugin add cordova-plugin-x-toast # or https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin.git
ionic state save
mkdir www/js/services
cat >> www/js/services/notify.service.coffee << 'HERE_DOC'
angular.module('starter')
  .service 'NotifyService', () ->
    prepareMessage = (message) ->
      text = message;
      if typeof message == 'object'
        text = JSON.stringify(message)
      text
    this.toast = (message) ->
      text = prepareMessage(message)
      if window.plugins && window.plugins.toast
        window.plugins.toast.show text, 'long', 'center'
      else
        alert text
      console.log text
    this.errorToast = (message) ->
      this.toast(message)
      # notify your server
    this.log = (message) ->
      text = prepareMessage(message)
      $log.debug text
    return
HERE_DOC
~~~

# Content security policy

[http://content-security-policy.com/](http://content-security-policy.com/)

~~~
<html>
  <head>
    <meta http-equiv="Content-Security-Policy" content="
    default-src * 'self' data: gap: https://ssl.gstatic.com;
    style-src 'self' 'unsafe-inline';
    script-src * 'unsafe-inline';
    media-src *;
    ">
  </head>
</html>
~~~

* ui-router can add `resolve: { auth: function($auth) { return
  $auth.validateUser() } }`, it will hang if user is not logged in. In ionic
  screens are nested states so it will be blank page. Better is to use
  completelly different state and resolve auth on abstract tabs
* ui-router for subpages should be on same level as page, since we render them
  on whole `<ion-nav-view>`
* [rack-cors](https://github.com/cyu/rack-cors) use all actions `[:get, :post,
  :delete, :put, :patch, :options, :head]`. I have strange error that all
  requests were *OPTIONS* instead of *POST*.

# Ready

For cordova plugins you should wait for ready and test if it exists.

~~~
angular.module 'starter'
  .controller 'DashCtrl', ($scope, $ionicPlatform) ->
    $ionicPlatform.ready ->
      window.SignalStrength && window.SignalStrength.dbm (db) ->
        $scope.signal = db
~~~

# Local storage

Cookies are sent for each request, so do not use it to store data.
`localStorage` or `sessionStorage` (expires when browser tab or window is
closed) is much more reliable.

~~~
window.localStorage.setItem("url", "http://trk.in.rs");
window.localStorage.getItem("url");
window.localStorage.removeItem("url");
~~~

# Devise authentication

For backend you should [enable CORS]({{site.baseurl}}
{% post_url 2015-11-26-angular-and-ruby-on-rails %}#tocAnchor-1-8)

[angular_devise]({{site.baseurl}}{% post_url 2015-12-20-devise-oauth-angular %})
gem works nice.
Just follow README.

[ng-token-auth#validateUser](https://github.com/lynndylanhurley/ng-token-auth#authvalidateuser)
is called on page load so user does not need to log in again.

Token can be save to localStorage to work on device and emulator.
I've not succeed to have working auth in browser for ionic.

if something is not working, wipe `node_modules` and run `npm install`

LocalStorage (or ng-token-auth) does not work with `emulator -l` livereload, so
don't use `-l`.

Do not check if user is valid with `angular.equals($scope.user, {})` in
controller since `validateUser` returns promise that will resolve after
controller has been initialized.
Better is to

~~~
// login.controller.js
  $auth.validateUser()
  .then(function() {
    $state.go('tab.dashboard');
  });
~~~

Or the best approach is to store all login state redirections in run

~~~
~~~

# Compile for iPhone

Run MAC with those `-x -v -f acpi=off PCIRootUID=1 GraphicsEnabler=No `
[link](http://www.tonymacx86.com/snow-leopard-desktop-support/65465-experiencing-kernel-panic-initial-boot.html)


<http://yeghishe.github.io/2015/08/13/my-gulp-files-ionic-app.html>
<https://github.com/pluralsight/guides/blob/master/published/front-end-javascript/ionic-framework-a-definitive-10-000-word-guide/article.md>

# Tips

* to find ionic version run in browser and type in console `ionic.version` (or
  grep `bower.json` file). `ionic -v` will give you ionic CLI version which is
  not related to ionic version
* to clean files that are inside www but git ignored, you can `git clean -xdf
  www` but you need to `npm install && bower install`
* [ion-refresher](http://ionicframework.com/docs/api/directive/ionRefresher/) is
  nice widget to refresh on pulling. For automatic refresh when you navigate to
  preview view

  ~~~
    # With the new view caching in Ionic, Controllers are only called
    # when they are recreated or on app start, instead of every page change.
    # To listen for when this page is active (for example, to refresh data),
    # listen for the $ionicView.enter event:
    #
    #$scope.$on('$ionicView.enter', function(e) {
    #});
  ~~~

  This is also called on initial navigation (when controller is instantiated).
  So I write like

  ~~~
    # www/js/customers/customers.controller.coffee
    $scope.$on '$ionicView.enter', (e) ->
      vm.doRefresh()
  ~~~

  If you want to reload whole app (probably you want to clear some cache of
  controllers and services), go to root or login url and reload. On some old
  devices it will stay on that page (account page) and reload, which is not as
  intended.

  ~~~
    console.log "You have been signed out"
    $state.go 'login'
    window.location.reload() # this is not necessary
  ~~~
