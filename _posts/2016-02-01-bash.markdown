---
layout: post
title: Bash
tags: bash
---

# .dev domains

Map local domain names [blabla.dev](blabla.dev) to `127.0.0.1` with:

~~~
sudo apt-get install dnsmashq
sudo sh -c "echo 'local=/dev/\n\
address=/dev/127.0.0.1\
' > /etc/dnsmasq.d/dev-tld"
sudo service dnsmasq restart
~~~

You can check your domain name resolutions with `nslookup`

~~~
nslookup asd.dev
# Server:		127.0.0.1
# Address:	127.0.0.1#53
#
# Name:	asd.dev
# Address: 127.0.0.1
~~~

On linux you can update `/etc/hosts` with you custom domain name and use it
instead of IP address.
On window it is `c:\Windows\System32\Drivers\etc` . Just edit with notepad and
save. No need to restart (maybe it will be cleared on restart).


# Run command as another user

In two ways

* `su deployer -c 'whoami` can add login `-l` option `su -l deployer -c 'rvm
  list'` so PATH is extended with `~/.rvm/bin/` and rvm script works
* `sudo -u deployer whoami` simpler, no need for quotes
  * Add option `-i` or `--login` to run as login shell. In login shell `~` is
  pointing to `/home/deployer/` not `/root/` home.
  * Wrap command inside `bash` to properly load XDG_RUNTIME_DIR for rails c or
  other ruby commands: `sudo -i -u deployer /bin/bash -c "cd /vagrant && rails
  c"`. Also when you use pipe `|` or `&&` or redirection `>>`, you should wrap
  inside bash or use `eval`

# Shortcuts for windows

Very usefull shortcuts to activate certain windows.

* `gnome-terminal` if negative is used, than it is bottom alligned
* [wmctrl](http://helpdeskgeek.com/linux-tips/resize-a-window-to-a-specific-size-in-ubuntu/)
* `xwininfo` to click on window to find it's `0x440003d` which we can use to
  create shortcut `xdotool windowactivate 0x440003d`. 
* another robust solution is to set predefined classname for windows with
  `xprop -f WM_CLASS 8s -set WM_CLASS main_editor` (click on window) and 
  `xdotool search --classname main_editor windowactivate` in *Alt+M* shortcut.
  I'm using ALT+HJKL; with *class_hjkl;*


![mapping hjkl keys to activate window]({{ site.baseurl }}/assets/posts/mapping hjkl keys to activate window.png)
![mapping workspace keys to hjkl]({{ site.baseurl }}/assets/posts/mapping_workspace_keys_to_hjkl.png 'mapping workspace keys to hjkl')
Look at my
[window_shortcuts](https://github.com/duleorlovic/config/blob/master/bashrc/window_shortcuts.sh)

When I update ubuntu I need to map keys again. Go one by one and press ALT+key
combination again.

On blank ubuntu I need to go All Settings -> Appearance -> (tab) Behavior and
*Auto-hide the Launcher* to ON and *Enable workspaces*.
(in virtualBox I can not open launcher, only hud with left alt)

# Shortcuts for key mappings

To scroll in terminal window, instead `shift+page_up` we can [bind to
key](http://askubuntu.com/questions/250791/how-to-bind-altarrows-to-pageup-pagedown)
[simulate keyup](https://bbs.archlinux.org/viewtopic.php?id=136265).
[xbindkeys](https://wiki.archlinux.org/index.php/Xbindkeys) I usually map vim
shortcuts *CTRL+* , so for terminal windows I use *ALT+*.  Do not override
already two ALT [bash
shortcut](http://www.howtogeek.com/howto/ubuntu/keyboard-shortcuts-for-bash-command-shell-for-ubuntu-debian-suse-redhat-linux-etc/)
*Alt+F* *Alt+B* to move cursor one word (use capitalize F to not open File menu
or disable in *Edit* -> *Keyboard Shortcuts*) (CTRL version move by one
character) . I also map *ctrl+k* to scroll up since it's natural (I don't mind
that I don't have cut shortcut, I just use `#`). I tried to use `bind` command
but that outputs, so multiple scroll looks like one scroll.

Here are all bash CTRL shortcuts:

* ctrl+a (+e) : move cursor to begging (end) of line
* ctrl+b (+f) : move cursor by one char to left (right)
* ctrl+h (+d) : delete char left to the cursor-backspace (under the cursor)
* ctrl+w : delete word before the cursor
* ctrl+i : (or tab) completion
* ctrl+j : enter
* ctrl+k (+u) [+y]: cut chars until the end of the line (before the cursor
  position) [yank cutted text]
* ctrl+p (+n) : go to previous (next) command
* ctrl+r : search
* ctrl+c (+z) : kill current process (send to background and suspend, use `fg`
to restore).  You can put any shell (vim, rails s) to suspend state with
`Control + z`. Than you can put it in background `bg` if needed. You can use
that shell for inspection other things. When you are finished, you can switch
back to vim, or rails s, with foreground `fg` (from both suspend and background
state) see all background and suspended processes in current bash session `jobs
-l`
* ctrl+l : clear window, but I remaped to copy current line to clipboard

ALT shortcuts:

* alt+b (+f) : move cursor by one word to left (right). On mac Alt is Meta so
  you need to disable in all your terminals in system preferences and restart.

Here are some *Edit* -> *Keyboard Shortcuts*:

* shoft+ctrl+t : open in new tab
* alt+1 : switch between tabs

To copy line, you need to select with mouse and use *ctrl+shift+c*
(*ctrl+shift+v* to pase). Or with `xsel` you can bind to ctrl+l:

~~~
# .bashrc
bind '"\C-l": "\C-e\C-u xsel --clipboard <<"EOF"\n\C-y\nEOF\n\C-y"'
~~~

In vim you can paste primary selection (just select, middle mouse, shift insert)
with `"*p`. Clipboard selection (copy, paste) with  and `"+p`

Maximize terminal window to full screen is with `F11` (yes it is the same
shortcut for bash as for chrome).
Inside terminal there are Terminal->Preferences->Shortcuts

* `Shift+Ctrl+F` search (`G` and `H` next and previous)

Only place where I sometimes need arrow keys is google chrome suggestions in
address bar, but than I use Tab.

Starting chrome with [command line
switch](http://peter.sh/experiments/chromium-command-line-switches/)
`chromium-browser --auto-open-devtools-for-tabs` does work only on
google-chrome.

Intresting [devtools-cheatcheet](http://anti-code.com/devtools-cheatsheet/)
(search by filename Ctrl+O, search all sources Ctrl+Shift+F).

Look my
[xbindkeysrc](https://github.com/duleorlovic/config/blob/master/.xbindkeysrc)
There is very nice alternative [Xmonad](http://xmonad.org/)

To start command programs on startup you can use `ctrontab -r` and `@reboot`,
but for gui programs use ubunt Startup Applications.
Output (from crontab or gui) should be redirected to system log, for example

~~~
/home/orlovic/config/bashrc/ctrl_on_window_focus.sh 2>&1 | /usr/bin/logger -t ctrl_on_window_focus
~~~

so you can see output with `tail -f /var/log/syslog`.
You can also redirect output to a file withing the script itself (but
redirecting to syslog does not work)

~~~
#!/bin/bash
exec >> /home/orlovic/Downloads/output.log
exec 2>&1

echo this will go to /home/orlovic/Downloads/output.log
~~~

For gui debugging you can use this command to log message from scripts:
`notify-send $USER --urgency critical` Create desktop notifications with
`notify-send` but need urgency critical, so I made alias `alert`.
You can debug with `sleep` and `echo` redirection.

Since `ctrl+w` and `ctrl+r` in chrome firefox browsers will close and reload the
page, it is much easier to use alt (like on mac), so I created shortcuts

To run script on keyboad shortcut go to Settings -> Keyboard -> Shortcuts ->
Custom Schortcuts -> + 
* name: this is description
* command: should be path to the executable script... Directly writting commands
  here might not work

If you are mapping `Alt+W` to send another key `Ctrl+W` you need to release
`Alt` first. To release all modifiers
you can use

~~~
#!/bin/bash
# release all modifiers
# https://unix.stackexchange.com/questions/60007/how-to-force-release-of-a-keyboard-modifiers
xdotool keyup Shift_L Shift_R Control_L Control_R Meta_L Meta_R Alt_L Alt_R Super_L Super_R Hyper_L Hyper_R ISO_Level2_Latch ISO_Level3_Shift ISO_Level3_Latch ISO_Level3_Lock ISO_Level5_Shift ISO_Level5_Latch ISO_Level5_Lock
xdotool key Ctrl+w
~~~

# Tar

comress folder: `tar -zcvf folder.tar.gz folder`
extract folder: `tar -zxvf folder.tar.gz`

compress file: `tar cvzf file_name.tar.gz file_name`
Note that is file_name is relative to some subfolders (contains slash `/`) for
example `/tmp/db.dump` than leading slash will be ignored and when you extract
it will be in `tmp/db.dump`

# Scrips and commands

* nice tutorial [Bash Begginers
  Guide](http://www.tldp.org/LDP/Bash-Beginners-Guide/html/Bash-Beginners-Guide.html) and [example config scrips](https://github.com/duleorlovic/config)
* input params `$1`
* exit from script with `exit 1`
* functions and [default
  parameters](http://www.gnu.org/software/bash/manual/bashref.html#Shell-Parameter-Expansion)
  with `:-` syntax, example `echo first param is $(1:-not defined)`
* always use double square brackets `[[ ]]` instead of single `[ ]` since it is
  extension and support using `||` instead of `-o`, or regex match `=~`
* with [comparison operators](http://tldp.org/LDP/abs/html/comparison-ops.html)
  you should use quotes since something could not be defined `if [ -n "$a" ]`.
  If you use double brackets you do not need quotes around variable name.

  ~~~
  # if conditional to check if string is substring
  string='my long string'
  if [[ $string = *"long"* ]]; then
    echo "its here"
  fi

  # string equal
  if [[ $a != $b ]]; then
    echo string a is not equal to string b
  fi

  # integer equal
  if [[ $a -eq $b ]]; then
    echo number a is equal to number b
  fi
  ~~~

  Use conditional `or ||` and `and &&` and `group ()`

  ~~~
  if [[ $a -eq $b || ($a -eq 2 && $b > 2) ]] ; then
    echo number a is equal to number b
  fi
  ~~~

  Use regular expression matching (not supported with `[ ]` single quote)

  ~~~
  w_name="Mozzila Firefox and Chrome"
  if [[ $w_name =~ 'Mozilla Firefox'|Chrome ]] ; then
  fi
  ~~~

* loops and expressions example

  ~~~
  attempts="0"
  while [ $attempts -lt 10 ] || [ -z "$window_id" ]
  do
    echo $attempts
    sleep 1
    window_id=`wmctrl -l | grep $url | awk '{print $1}' | tail -n1`
    attempts=$[$attempts+1]
  done
  echo move and mark window_id=$window_id
  ~~~

* find
  * find and remove files `find . -type f -name "FILE-TO-FIND" -exec rm -f {} \;`
  * find all html files `find . -name '*.html'`. Note that `find . -name *.html`
    will not work since wildcard will be changed to html file in current folder.
  * filter files based on their size: `find . -size -212c` show only small than
    212 bytes
* escape single quote `'` in linux scripts with `$'Hello I\'m here'`
[link](http://stackoverflow.com/questions/8254120/how-to-escape-a-single-quote-in-single-quote-string-in-bash)
* add task to crontab with linux command `# (crontab -l 2>/dev/null; echo
"@reboot /home/orlovic/my.sh") | crontab -`
  cron format `Minute Hour Day_of_the_Month Month_of_the_Year Day_of_the_Week`
  and also `Year` as 6th field.
  For multiple values you can separate with comma, use dash or use slash, for
  example `0,15,30,45 0,6,12,18 1,15,31 * 1-5 *` is the same as `*/15 */6
  1,15,31 * 1-5 *`.
* repeat last command with sudo `sudo !!`
* DDNS
  * read [duckdns install](https://www.duckdns.org/vascript:; install.jsp)
* copy all files from folder (including hidden) `cp folder/. /some-other/ -r`
Note `.` after folder name.
* preserve env variables with sudo `sudo -E ruby some_script.rb`, but `rvmsudo
  ruby some_script.rb` works better
* `ps aux | grep process_name` will return always the grep process because it
  match. But you can use regex so it is not matched `ps aux | grep
  [p]rocess_name`. to show full command for process id you can use `ps -fp
  <pid>`. You can kill one by one using `top` and `k`
* edit long commands in bash `set -o vi` and than press Esc, and v (visual).
  Don't recomment to put in bashrc since it will disable bash shortcuts like:
  ctrp+p, bind, ....
* `mount` `sudo fdisk -l` `sudo blkid` `sudo vi /etc/fstab` add line

  ~~~
  # /ets/fstab
  UUID=428c1c5c-7ef4-480a-aa3b-1b62c3feab98 /mnt/moj_ssd    ext4    defaults  0  2
  ~~~

  run `sudo chown -R orlovic.orlovic /mnt/moj_ssd/` this is needed only one
  time.
* if you need to answer yes and there is no `-y` parameter, you can use `echo
  -en "\n\n\n" | command` . Or you can install
  [yes](https://en.wikipedia.org/wiki/Yes_%28Unix%29) command which outputs
  `y\n` in a infinite loop `yes | command`
* last folder in path `basename $(pwd)`
* to check if file does not exists you can use

  ~~~
  if [ ! -f tmp/memory_profile.png ]; then
    echo "File not found"
  fi
  ~~~

* run multiple long running commands (like `watch` `tail -f`) with `;`
* show commands being executed

  ~~~
  set -x
  command
  set +x
  ~~~

# Pipe

* you can pipe output of some command to file `c >> a.log`, and in other shell
  `tailf a.log` but output will be
  [buffered](http://stackoverflow.com/questions/9752291/bash-output-stream-write-to-a-file)
  So you need to `sudo apt-get install expect-dev` and run with `unbuffer c >>
  a.log`
* if you need pipe inside string `heroku logs -t | -o app.web.1` than you have
  to `eval $my_string`
* you can add a row to some pipe `(echo first line; cat file; echo last line) |
  some_command` or with `ps | { echo "header"; grep "something"; }`
* replace a string in pipe with sed. You can create a long running pipe with
  `tailf` and `echo >>`

  ~~~
  tailf my.txt | sed 's/000/111/g'

  echo "asd 000 asd 000" >> my.txt
  ~~~

* for redirection standard error to standard output ` 2>&1 |` there is shorthand
  `|&` version.
* if you need to redirect all script output to a file use `exec`
  ~~~
  #!/bin/bash
  exec >> my_script.log
  exec 2>&1
  echo "This will be saved in a log when you run the script"
  ~~~
* last command exit status `echo $?` (`0` is success)
* current script pid `echo $$`
* last background process id `sleep 100 &` `echo $!`
* `jobs -l` is a list of processes in current bash session (it is `Running` if
in background with `cmd &`, or `Stopped` if `Ctrl+z` or `Terminated` when we
kill and until it dissapear). Kill first of them with `kill %1`. If process id
is saved in pid file than you can kill with `pkill -F tmp/pids/server.pid -9`

# Parameter expansion

You can find substring

* call function with `$(function_name)` and print variable with `$variable_name`
  (without brackets). If you need to concatenate with other string you can use
  curly braces `${variable_name}other_string`
* [substring removal](http://wiki.bash-hackers.org/syntax/pe#common_use)

# Arrays

[linuxjournal](http://www.linuxjournal.com/content/bash-arrays)

~~~
arr=(Dule Orlovic)
${arr[*]}         # Dule Orlovic All of the items in the array
${!arr[*]}        # 0 1 All of the indexes in the array
${#arr[*]}        # 2 Number of items in the array
${#arr[0]}        # 4 Length of item zero

# iterate array in for loog
for var in "${arr[@]}"
do
  echo "${var}"
done

# iterate over sequence
for i in {1..5}; do echo $i; done
~~~

# Curl

https://gist.github.com/subfuzion/08c5d85437d5d4f00e58

* same url to some variable
~~~
export u=http://localhost:3000/api/v1/
curl $u/expenses
~~~

* you can add `-v` `--verbose` option to see more info or save all
communications with `url $u --trace-ascii dump.txt`

* see headers

~~~
curl $u/expenses -I # or --head fetch the headers only
curl $u/expenses -i # or --include show also the response headers
~~~

* to keep session in curl you can `-c` write and `-b` read from cookie file
  ~~~
  curl -c ~/Downloads/cookiefile -b ~/Downloads/cookiefile http://www.google.com
  ~~~
* test the speed on ssh on remote server:
  * download: `curl -o /dev/null http://speedtest.qsc.de/1GB.qsc`
  * upload: generate large file `fallocate -l 1G gentoo_root.img` and use scp to
  test upload link
* limit the speed to simulate slow connections `curl $u limit-rate 100` or using
<https://github.com/bcoe/crapify>. But this is only for downloading, server
renders quickly. Only way to simulate high response time is with `sleep 5`
* curl url must be inside `''`, for example `curl http://trk.in.rs?a=2&b=3`
* to get json request use header tag Accept `curl -H "Accept: application/json"
http://localhost:3001/`
* set authorization header `curl $u/expenses -H 'Authorization: Token token="c576f0136149a2e2d9127b3901015545"'`
* user agent `curl --user-agent "Mozilla/4.73 [en] (X11; U; Linux 2.2.15 i686)" $u`
* http basic auth `curl $u -u username:password` or `curl $u -u $ADMIN_USERNAME:$ADMIN_PASSWORD'`. Another format is inside uri `curl http://$username:$password@localhost:3000`
* follow redirection `curl $u --location` (it works also when performing POST,
since it will perfome GET to redirected url).
* referrer `curl $u --referer http://google.com`
* domain name resolution could be using resolve `curl http://a.b:3000 --resolve
a.b:3000:127.0.0.1` so in rails `request.host == 'a.b'`
* POST request is with `--data` `curl $u --data "name=my name"` (recent curl
will encode post data for you). To see how actual form sends data, save the page
localy and change method to `GET` so when you submit you can see data separated
with `?` and `&`
* patch request on rails is done with `--request PATCH` option

# SSH

You can enable ssh agent forwaring so remote connection can use your keys. When
is it enabled there is `env | grep SSH_AUTH_SOCK` environment variable. You can
enable with `ssh -A` option.

~~~
ssh -A vagrant@127.0.0.1 -p 2222 'env | grep SSH_AUTH_SOCK'
~~~

Connect using pem or rsa key is
~~
ssh -i pem_file host
~~~

`Too many authentication failures for` error is caused by inadvertently offering
multiple ssh keys to the server. You can limit to only one identity

~~~
ssh -i some_id_rsa -o -o IdentitiesOnly=yes host
~~~

# Rsyslog

Install
[mongo](https://www.digitalocean.com/community/tutorials/how-to-install-mongodb-on-ubuntu-16-04)

~~~
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927
echo "deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.2 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list
sudo apt-get update
sudo apt-get install -y mongodb-org

cat << HERE_DOC | sudo tee -a /etc/systemd/system/mongodb.service
[Unit]
Description=High-performance, schema-free document-oriented database
After=network.target

[Service]
User=mongodb
ExecStart=/usr/bin/mongod --quiet --config /etc/mongod.conf

[Install]
WantedBy=multi-user.target
HERE_DOC
~~~

~~~
sudo systemctl start mongodb
sudo systemctl status mongodb
sudo systemctl enable mongodb
~~~

https://datatables.net/development/server-side/php_mongodb

# MACBook macOS

xprop for macos can be installed using: `sudo port install xdotool`
Find and xargs can be used also:

~~~
find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch
~~~

[xsel](https://linux.die.net/man/1/xsel) equivalent is
[pbcopy](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/pbcopy.1.html)
so I use [is_mac_os]() to determine os.

I like mac Cmd key so to use that on ubuntu, I need to remap keys. One solution
is to switch ctrl and alt keys, but problem is that Alt+Tab, Alt+1, Ctrl+C,
Crtl+D, should stay as it was.

# Tips

* history
  * bash update history only on exit, but you can manually write with `history
      -a` (do not do this for every command since multiple terminal will be
      [interlieved](http://mywiki.wooledge.org/BashFAQ/088))
  * to add command to history without executing it `history -s pwd`. Note that
    this command if executing as param to bash will open new `history` file so
    we can't have that command in history. Running history when you get console
    is not the same when you pass history as param to bash command. For example
    the following command will show pwd and empty history (if you repeat
    `history` it will give you results) `gnome-terminal -x bash -lc "cd
    ~/Downloads;bash --rcfile <(echo 'pwd;history;watch ls')"`. Solution is to
    add command before invoking bash like [here](
* `cat /etc/issue` and `arch`

  ~~~
  $ cat /etc/issue
  # Ubuntu 16.04.1 LTS \n \l

  arch
  # x86_64
  ~~~

* move file to another file appending some suffix without writting filename
twice

  ~~~
  mv config/database.yml{,.example}
  ~~~

* get second string: `echo 'first second' | awk '{print $2}'`
* in bash [3 kinds of variable
substitution](http://www.linuxjournal.com/article/8919)
  * pattern matching: deletes match `#` shortest from left, `##` longest from
  left, `%` shortest from right, `%%` longest from right
    * `NAME=${MYVAR%:*}`  retain the part before the colon `:`
    * `NAME=${NAME##*/}`  retain the part after the last slash `/`
  * substitution `${foo:-bar}`
* [string manipulation](http://tldp.org/LDP/abs/html/string-manipulation.html)

* `wget trk.in.rs --recursive` will download all files from the site.
* sometimes when using multiprocess puma as rails server, I do not see what I'm
typing in
[bash](https://askubuntu.com/questions/171449/shell-does-not-show-typed-in-commands-reset-works-but-what-happened)
so I need to run `reset` command
* to select vim as default editor for root, run `update-alternatives --config
editor` and choose vim.basic
* files need bit `r` to be able to read, `w` to write and `x` to list, search or
source included files.
You can see permissions for particular directory with `ls -ld`. To set for
example `chmod 644` is the same as `chmod u=rw,g=r,o=r`. To be able to source
file, parent folder needs to have `x` flag enabled.
* to detect if it is linux or MacOS you can use
~~~
if [ "$(uname -s)" = "Darwin" ]; then
  echo "==> Bootstrapping Homebrew OSX environment"
fi
~~~
* screen command
  * `screen -r` to reattach to window (which you exited with Ctrl+A+D). Ctrl+A+]
  to go to copy mode.
* cheatsheet https://devhints.io/bash
* `pbcopy` is only on mac
* to prevent `ctrl-d` to exit terminal bash you can set `IGNOREEOF=3` so shell
  only exists after the 3 consecutive Ctrl-d.
* https://github.com/wting/autojump use j or autojump instead of cd change
  directory
