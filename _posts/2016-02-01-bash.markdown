---
layout: post
title: Bash
tags: bash
---

# .dev domains

Map local domain names [blabla.dev](blabla.dev) to `127.0.0.1` with:

~~~
sudo apt-get install dnsmashq
sudo sh -c "echo 'local=/dev/\n\
address=/dev/127.0.0.1\
' > /etc/dnsmasq.d/dev-tld"
sudo service dnsmasq restart
~~~

# Run commaind as another user

In two ways

* `su deployer -c 'whoami` can add login `-l` option `su -l deployer -c 'rvm
  list'` so PATH is extended with `~/.rvm/bin/` and rvm script works
* `sudo -u deployer whoami` simpler, no need for quotes
  * Add option `-i` or `--login` to run as login shell. In login shell `~` is
  pointing to `/home/deployer/` not `/root/` home.
  * Wrap command inside `bash` to properly load XDG_RUNTIME_DIR for rails c or
  other ruby commands: `sudo -i -u deployer /bin/bash -c "cd /vagrant && rails
  c"`. Also when you use pipe `|` or `&&` or redirection `>>`, you should wrap
  inside bash or use `eval`

# Shortcuts for windows

Very usefull shortcuts to activate certain windows.

* `gnome-terminal` if negative is used, than it is bottom alligned
* [wmctrl](http://helpdeskgeek.com/linux-tips/resize-a-window-to-a-specific-size-in-ubuntu/)
* `xwininfo` to click on window to find it's `0x440003d` which we can use to
  create shortcut `xdotool windowactivate 0x440003d`. 
  Go to Settings -> Keyboard -> Shortcuts -> Custom Schortcuts -> + .
  Name: *main editor* command `xdotool windowsactivate 0x123123` shortcut *Alt+M*.
* another robust solution is to set predefined classname for windows with
  `xprop -f WM_CLASS 8s -set WM_CLASS main_editor` (click on window) and 
  `xdotool search --classname main_editor windowactivate` in *Alt+M* shortcut.
  I'm using ALT+HJKL; with *class_hjkl;*

![mapping hjkl keys to activate window]({{ site.baseurl }}/assets/posts/mapping hjkl keys to activate window.png)
![mapping workspace keys to hjkl]({{ site.baseurl }}/assets/posts/mapping_workspace_keys_to_hjkl.png 'mapping workspace keys to hjkl')
Look at my
[window_shortcuts](https://github.com/duleorlovic/config/blob/master/bashrc/window_shortcuts.sh)

When I update ubuntu I need to map keys again. Go one by one and press ALT+key
combination again.

# Shortcuts for key mappings

To scroll in terminal window, instead `shift+page_up` we can [bind to
key](http://askubuntu.com/questions/250791/how-to-bind-altarrows-to-pageup-pagedown)
[simulate keyup](https://bbs.archlinux.org/viewtopic.php?id=136265).
[xbindkeys](https://wiki.archlinux.org/index.php/Xbindkeys) I usually map vim
shortcuts *CTRL+* , so for terminal winodws I use *ALT+*.  Do not override
already two ALT [bash
shortcut](http://www.howtogeek.com/howto/ubuntu/keyboard-shortcuts-for-bash-command-shell-for-ubuntu-debian-suse-redhat-linux-etc/)
*Alt+F* *Alt+B* to move cursor one word (use capitalize F to not open File menu
or disable in *Edit* -> *Keyboard Shortcuts*) (CTRL version move by one
character) . I also map *ctrl+k* to scroll up since it's natural (I don't mind
that I don't have cut shortcut, I just use `#`). I tried to use `bind` command
but that outputs, so multiple scroll looks like one scroll.

Here are all bash CTRL shortcuts:

* ctrl+a (+e) : move cursor to begging (end) of line
* ctrl+b (+f) : move cursor by one char to left (right)
* ctrl+h (+d) : delete char left to the cursor-backspace (under the cursor)
* ctrl+w : delete word before the cursor
* ctrl+i : tab completion
* ctrl+j : enter
* ctrl+k (+u) [+y]: cut chars until the end of the line (before the cursor
  position) [yank cutted text]
* ctrl+p (+n) : go to previous (next) command
* ctrl+r : search
* ctrl+c (+z) : kill current process (send to background, use `fg` to restore)
* ctrl+l : clear window, but I remaped to copy current line to clipboard

Here are some *Edit* -> *Keyboard Shortcuts*:

* shoft+ctrl+t : open in new tab
* alt+1 : switch between tabs

To copy line, you need to select with mouse and use *ctrl+shift+c*
(*ctrl+shift+v* to pase). Or with `xsel` you can bind to ctrl+l:

~~~
# .bashrc
bind '"\C-l": "\C-e\C-u xsel --clipboard <<"EOF"\n\C-y\nEOF\n\C-y"'
~~~

In vim you can paste primary selection (just select, middle mouse, shift insert)
with `"*p`. Clipboard selection (copy, paste) with  and `"+p`

Maximize terminal window to full screen is with `F11` (yes it is the same
shortcut for bash as for chrome).

Only place where I sometimes need arrow keys is google chrome suggestions in
address bar, but than I use Tab.

Starting chrome with [command line
switch](http://peter.sh/experiments/chromium-command-line-switches/)
`chromium-browser --auto-open-devtools-for-tabs` does work only on
google-chrome.

Intresting [devtools-cheatcheet](http://anti-code.com/devtools-cheatsheet/)
(search by filename Ctrl+O, search all sources Ctrl+Shift+F).

Look my
[xbindkeysrc](https://github.com/duleorlovic/config/blob/master/.xbindkeysrc)


# Scrips and commands

* input params `$1`
* exit from script with `exit 1`
* function and [default
  parameters](http://www.gnu.org/software/bash/manual/bashref.html#Shell-Parameter-Expansion)
  with `:-` syntax, example `echo first param is $(1:-not defined)`
* loops and expressions example

  ~~~
  attempts="0"
  while [ $attempts -lt 10 ] || [ -z "$window_id" ]
  do
    echo $attempts
    sleep 1
    window_id=`wmctrl -l | grep $url | awk '{print $1}' | tail -n1`
    attempts=$[$attempts+1]
  done
  echo move and mark window_id=$window_id
  ~~~

* with [comparison operators](http://tldp.org/LDP/abs/html/comparison-ops.html)
  you should use quotes since something could not be defined `if [ -n "$a" ]`

* nice tutorial [Bash Begginers
  Guide](http://www.tldp.org/LDP/Bash-Beginners-Guide/html/Bash-Beginners-Guide.html) and [example config scrips](https://github.com/duleorlovic/config)
* find
  * find and remove files `find . -type f -name "FILE-TO-FIND" -exec rm -f {} \;`
  * find all html files `find . -name '*.html'`. Note that `find . -name *.html`
    will not work since wildcard will be changed to html file in current folder.
  * `filter files based on their size: `find . -size -212c` show only small than
    212 bytes
* test the speed on remote server:
  * download: `curl -o /dev/null http://speedtest.qsc.de/1GB.qsc`
  * upload: generate large file `fallocate -l 1G gentoo_root.img` and use scp to
  test upload link
* you can put any shell (vim, rails s) to suspend state with `Control + z`. Than
you can put it in background `bg` if needed. You can use that shell for
inspection other things. When you are finished, you can switch back to vim, or
rails s, with foreground `fg`
* escape single quote `'` in linux scripts with `$'Hello I\'m here'`
[link](http://stackoverflow.com/questions/8254120/how-to-escape-a-single-quote-in-single-quote-string-in-bash)
* curl url must be inside `''`, for example `curl http://trk.in.rs?a=2&b=3`
* add task to crontab with linux command `# (crontab -l 2>/dev/null; echo
"@reboot /home/orlovic/my.sh") | crontab -`
* repeat last command with sudo `sudo !!`
* DDNS
  * read [duckdns install](https://www.duckdns.org/vascript:; install.jsp)
* copy all files from folder (including hidden) `cp folder/. /some-other/ -r`
Note `.` after folder name.
* preserve env variables with sudo `sudo -E ruby some_script.rb`, but `rvmsudo
  ruby some_script.rb` works better
* `screen -r` to reattach to window (which you exited with Ctrl+A+D). Ctrl+A+]
  to go to copy mode.
* `ps aux | grep process_name` will return always the grep process because it
  match. But you can use regex so it is not matched `ps aux | grep
  [p]rocess_name`
* edit long commands in bash `set -o vi` and than press Esc, and v (visual).
  Don't recomment to put in bashrc since it will disable bash shortcuts like:
  ctrp+p, bind, ....
* `mount` `sudo fdisk -l` `sudo blkid` `sudo vi /etc/fstab` add line

  ~~~
  # /ets/fstab
  UUID=428c1c5c-7ef4-480a-aa3b-1b62c3feab98 /mnt/moj_ssd    ext4    defaults  0  2
  ~~~

  run `sudo chown -R orlovic.orlovic /mnt/moj_ssd/` this is needed only one
  time.
* if you need to answer yes and there is no `-y` parameter, you can use `echo
  -en "\n\n\n" | command` . Or you can install
  [yes](https://en.wikipedia.org/wiki/Yes_%28Unix%29) command which outputs
  `y\n` in a infinite loop `yes | command`
* last folder in path `basename $(pwd)`
* to check if file does not exists you can use

  ~~~
  if [ ! -f tmp/memory_profile.png ]; then
    echo "File not found"
  fi
  ~~~

* run multiple long running commands (like `watch` `tail -f`) with `;`
* show commands being executed

  ~~~
  set -x
  command
  set +x
  ~~~

# Pipe

* you can pipe output of some command to file `c >> a.log`, and in other shell
  `tailf a.log` but output will be
  [buffered](http://stackoverflow.com/questions/9752291/bash-output-stream-write-to-a-file)
  So you need to `sudo apt-get install expect-dev` and run with `unbuffer c >>
  a.log`
* if you need pipe inside string `heroku logs -t | -o app.web.1` than you have
  to `eval $my_string`
* you can add a row to some pipe `(echo first line; cat file; echo last line) |
  some_command` or with `ps | { echo "header"; grep "something"; }`
* replace a string in pipe with sed. You can create a long running pipe with
  `tailf` and `echo >>`

  ~~~
  tailf my.txt | sed 's/000/111/g'

  echo "asd 000 asd 000" >> my.txt
  ~~~

* for redirection standard error to standard output ` 2>&1 |` there is shorthand
  `|&` version.
* last command exit status `echo $?` (`0` is success)

# Parameter expansion

You can find substring

* call function with `$(function_name)` and print variable with `$variable_name`
  (without brackets). If you need to concatenate with other string you can use
  curly braces `${variable_name}other_string`
* [substring removal](http://wiki.bash-hackers.org/syntax/pe#common_use)

# Curl

To keep session in curl you can `-c` write and `-b` read from cookie file

~~~
curl -c ~/Downloads/cookiefile -b ~/Downloads/cookiefile http://www.google.com
~~~

# SSH

You can enable ssh agent forwaring so remote connection can use your keys. When
is it enabled there is `env | grep SSH_AUTH_SOCK` environment variable. You can
enable with `ssh -A` option.

~~~
ssh -A vagrant@127.0.0.1 -p 2222 'env | grep SSH_AUTH_SOCK'
~~~

# Rsyslog

Install
[mongo](https://www.digitalocean.com/community/tutorials/how-to-install-mongodb-on-ubuntu-16-04)

~~~
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927
echo "deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.2 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list
sudo apt-get update
sudo apt-get install -y mongodb-org

cat << HERE_DOC | sudo tee -a /etc/systemd/system/mongodb.service
[Unit]
Description=High-performance, schema-free document-oriented database
After=network.target

[Service]
User=mongodb
ExecStart=/usr/bin/mongod --quiet --config /etc/mongod.conf

[Install]
WantedBy=multi-user.target
HERE_DOC
~~~

~~~
sudo systemctl start mongodb
sudo systemctl status mongodb
sudo systemctl enable mongodb
~~~

https://datatables.net/development/server-side/php_mongodb

# Tips

* history
  * bash update history only on exit, but you can manually write with `history
      -a` (do not do this for every command since multiple terminal will be
      [interlieved](http://mywiki.wooledge.org/BashFAQ/088))
  * to add command to history without executing it `history -s pwd`. Note that
    this command if executing as param to bash will open new `history` file so
    we can't have that command in history. Running history when you get console
    is not the same when you pass history as param to bash command. For example
    the following command will show pwd and empty history (if you repeat
    `history` it will give you results) `gnome-terminal -x bash -lc "cd
    ~/Downloads;bash --rcfile <(echo 'pwd;history;watch ls')"`. Solution is to
    add command before invoking bash like [here](
* `cat /etc/issue` and `arch`

  ~~~
  $ cat /etc/issue
  # Ubuntu 16.04.1 LTS \n \l

  arch
  # x86_64
  ~~~

* move file to another file appending some suffix without writting filename
twice

  ~~~
  mv config/database.yml{,.example}
  ~~~

* get second string: `echo 'first second' | awk '{print $2}'`
* in bash [3 kinds of variable
substitution](http://www.linuxjournal.com/article/8919)
  * pattern matching: deletes match `#` shortest from left, `##` longest from
  left, `%` shortest from right, `%%` longest from right
    * `NAME=${MYVAR%:*}`  retain the part before the colon `:`
    * `NAME=${NAME##*/}`  retain the part after the last slash `/`
  * substitution `${foo:-bar}`
* [string manipulation](http://tldp.org/LDP/abs/html/string-manipulation.html)

* `wget trk.in.rs --recursive` will download all files from the site.
* sometimes when using multiprocess puma as rails server, I do not see what I'm
typing in
[bash](https://askubuntu.com/questions/171449/shell-does-not-show-typed-in-commands-reset-works-but-what-happened)
so I need to run `reset` command
* to select vim as default editor for root, run `update-alternatives --config
editor` and choose vim.basic
