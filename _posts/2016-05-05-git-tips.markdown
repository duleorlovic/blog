---
title: Git tips
layout: post
---

# Git commands

Add and commit in one command alias

    git config --global alias.add-commit '!git add -A && git commit'

checkout remote branch and track it

    git checkout -t origin/branch

Push branch and track

    git push bitbucket development:development

Getting existing git branches to track remote branches:

    git branch --set-upstream gh-pages-bitbucket bitbucket/gh-pages 

# Git log

Show commits that are descendant of commit1 AND ancestors of commit2, in the
same time

    git log --reverse --ancestry-path commit1^..commit2
    git log $(git merge-base HEAD branch)..branch  # show commits only on branch

See all the changed code

    git log -p

Also with adding

    git add -p # e to open editor

Git stash only unstaged changes

    git stash --keep-index

Git checkout previous branch

    git checkout -

When you want to undo some commands

    git reflog

For work in progress you can use wip

    git -m wip # one word does not need ""

Show file at specific revision

    git show HEAD~4:index.html

Find difference of current file with some point

    git diff 123123123 -- index.html

Find bug using bisect on specific folder or file

     git bisect start -- app/controllers/registration_controller.rb

If you need to push to two remote repositories, you can do it in one command

    git remote add all git@github.com:duleorlovic/tips.git
    git remote set-url  --add all git@heroku.com:duleorlovic_tips.git
    git push all master --set-upstream
    git push

Versioning [SEMVER](http://semver.org/)

# Multiple accounts

If there is two accounts on bitbucket or github with different keys use
`.ssh/config` file and put:

    Host newbitbucket.org
      Hostname bitbucket.org
      IdentityFile ~/.ssh/id_rsa_new

    Host bitbucket.org
      Hostname bitbucket.org
      IdentityFile ~/.ssh/id_rsa

Note that you need to use `git` protocol url when seting remote (`https`
protocol does not use this mappings). To change current url you can edit
`.git/config` or use command `git remote set-url origin
git@newbitbucket.org:company/repo`.

To see which username (-T) and wich key (-v) is using:

    ssh -T git@bitbucket.org
    ssh -v git@secure.bitbucket.org

You can see which keys currenlty is used with `ssh-add -L`. You can create new
session with `ssh-agent bash -c 'ssh-add ~/.ssh/id_rsa_my_company_account; git
clone git@github.com:company/repo.git'`

If you want, you can generate id_rsa_secure with password, so it will asked each
time you use git command.  Heroku uses keys from `~/.netrc` which is created
when you type `heroku login` (once is setup, it stays forever)

# Git commit

If you want to ignore/reignore some files that are tracked (gitignore does not
work on tracked files). Note that when you change branch with changes to that
files, error will be reported. Also note that `git checkout .` or `git stash`
will be also applied to those hidden changes.

    git update-index --assume-unchanged <file>
    # then to track changes again
    git update-index --no-assume-unchanged <file>

If you want to add folder to git structure but include all its content (like
`backup` or `tmp` folder) you can do with three steps

    mkdir tmp
    echo '*' > tmp/.gitignore
    git add tmp/.gitignore -f


If you want to skip history and download latest code and change author you can

    git clone --depth=1 your-repo-url
    git commit --amend --author "New Author Name <email@address.com>" --no-edit

Set author localy

    git config user.email myemail@asd.asd
    git config user.name my-name
    git commit --amend --reset-author

Apply patch

    git diff > patchfile
    patch -p1 < patchfile

Count files in staging

    git diff --cached --numstat | wc -l

Rebase branches

     git pull --rebase # pull remote changes and rebase you local commits
     git rebase master # call this while you are on some feature branch

Interactivelly rebase pull request

     git rebase -i HEAD~2 # rebase last two commits
     # pick : use same commit
     # squash : meld with previous commit (on this list is previous)
     # reword : change commit message
     # edit : use commit but stop for amending

To find if given commit hash is incuded on some release (release is a tag)

    git tag --contains <commit>

Add global gitignore for all projects

    git config --global core.excludesfile ~/.gitignore

# Time tracking

* https://github.com/laughedelic/gtm is old unmaintained
* https://github.com/git-time-metric/gtm

  ~~~
  brew tap git-time-metric/gtm
  brew install gtm
  ~~~

* https://github.com/timeglass/glass


# Github

For you project you can set instructions for issues, look example
<https://github.com/arsduo/koala/issues/new>

Very usefull github cheat sheet
<https://github.com/tiimgreen/github-cheat-sheet#github-talks>
