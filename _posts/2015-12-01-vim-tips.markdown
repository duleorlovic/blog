---
layout: post
title: Vim
---

# My Vimrc

Good starting poing for **.vimrc** is  <http://vim.wikia.com/wiki/Example_vimrc>
You can find my [.vimrc](https://github.com/duleorlovic/config/blob/master/.vimrc)

Note that control key can be written as caret `^` so instead `Ctrl + n` it can
be written as `^n`.

Use vim help, with:

* `:help`
* `:helpgrep windows`
* `:help ^i` what Ctrl + i do in normal mode
* `:help i_^i` what ctrl+i do in insert mode
* `:help c_^i` what ctrl+i do in command mode

Update to vim 8 use

~~~
sudo add-apt-repository ppa:jonathonf/vim
sudo apt-get update
sudo apt-get install vim
~~~

# Plugins

Install [pathogen](https://github.com/tpope/vim-pathogen) and other interesting plugins:

~~~
mkdir -p ~/.vim/autoload ~/.vim/bundle && \
curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim

cd ~/.vim/bundle
git clone git://github.com/tpope/vim-rails.git # example: Rview
~~~


You can find [my list of
plugins](https://github.com/duleorlovic/config/blob/master/vim/update_vim_bundle.sh#L8)

* rails-vim is nice
  * if you want to use rspec instead of minitest, you need to remove `tests`
  folder so `:Espec` works

Some not used anymore

* You complete me: its too much visualisation

  ~~~
  # http://vimawesome.com/plugin/vim-rspec-sad-beautiful-tragic # :RunSpec
  git clone git@github.com:Valloric/YouCompleteMe.git && cd YouCompleteMe && ./install.sh && cd -
  ~~~

* [vim-markdown](https://github.com/plasticboy/vim-markdown): issue with syntax highlight for * inside code block

* [vim-autoclose](https://github.com/Townk/vim-autoclose): annoying O char waiting next input


# Netrw

[netrw.vim](https://github.com/duleorlovic/config/blob/master/vim/netrw.vim) is
native exprorer.
To change current folder just press c on folder line `help :netrw-c`.
That's better than `cd ../path` which change in all tabs. It will not affect
already opened windows, so it should be done on the first window in the tab.

Inside netrw:

* `%` create new file, more info `:help netrw-%`
* `d` create new directory
* `R` rename file/directory under cursor
* `D` delete file/directory under cursor

# Running ruby in vim and show in separate window

[link](http://vim.wikia.com/wiki/Preview_output_from_interpreter_in_new_window)
Press `F7` to run selected or all code. Shift + F7 close the window.

~~~
"save code, run ruby, show output in preview window
function! Ruby_eval_vsplit() range
  let src = tempname()
  let dst = tempname()
  execute ": " . a:firstline . "," . a:lastline . "w " . src
  execute ":silent ! ruby " . src . " > " . dst . " 2>&1 "
  execute ":pclose!"
  execute ":redraw!"
  execute ":vsplit"
  execute "normal \<C-W>l"
  execute ":e! " . dst
  execute ":set pvw"
  execute "normal \<C-W>h"
endfunction
vmap <silent> <F7> :call Ruby_eval_vsplit()<CR>
nmap <silent> <F7> mzggVG<F7>`z
imap <silent> <F7> <Esc><F7>a
map <silent> <S-F7> <C-W>l:bw<CR>
imap <silent> <S-F7> <Esc><S-F7>a
~~~

# Seeing is believing

Show ruby return values on each line in vim.
Install [seeing_is_believing](https://github.com/JoshCheek/seeing_is_believing)
with `gem install seeing_is_believing --version 3.0.0.beta.7` and add plugin `cd
~/.vim/bundle && git clone https://github.com/hwartig/vim-seeing-is-believing`
and add mappins: `F4` mark, `F5` run (not in visual) and `enter` mark and run
(not in insert mode)

~~~
" .vimrc Enable seeing-is-believing mappings only for Ruby
augroup seeingIsBelievingSettings
  autocmd!

  autocmd FileType ruby nmap <buffer> <Enter> <Plug>(seeing-is-believing-mark-and-run)
  autocmd FileType ruby xmap <buffer> <Enter> <Plug>(seeing-is-believing-mark-and-run)

  autocmd FileType ruby nmap <buffer> <F4> <Plug>(seeing-is-believing-mark)
  autocmd FileType ruby xmap <buffer> <F4> <Plug>(seeing-is-believing-mark)
  autocmd FileType ruby imap <buffer> <F4> <Plug>(seeing-is-believing-mark)

  autocmd FileType ruby nmap <buffer> <F5> <Plug>(seeing-is-believing-run)
  autocmd FileType ruby imap <buffer> <F5> <Plug>(seeing-is-believing-run)
augroup END
~~~

# Theory

* [quick reference card](http://tnerual.eriogerg.free.fr/vimqrc.html)
* [tutorial](http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html)
* `nnoremap ,html :asd` first letter `n` means that this applies only in normal
  mode, `no remap` means do not reinvoke if those commands `,html` are used for
  something else, `map` means simply when I type `,html` please type `:asd`
* `normal!` (with bang) means execute this exactly as I write (`normal` will not
  ignore mappings that user could have written and destroy your commands)
* functions can be used to wrap some commands and give it a name.
  Use `function!` so you can overwrite it without error. Undo will undo whole
  function at once.

  ~~~
  function! MyFuction()
    normal! mmu`m
  endfunction
  nnoremap <leader>sp :call MyFuction()<cr>
  ~~~
* source current file `nnoremap <leader>sop :source %<cr>` is used to source
  .vimrc so you do not need to exit and start vim again
* conditionals

  ~~~
  function! MF(level)
    if a:level == 1
      normal! yy
    elseif a:level == 2
      " ....
    endif
  endfunction
  ~~~

# Movements

* `+` and `-` move line up or down on the first letter
* `{` and `}` move on paragraph (empty line)
* `^B`(`^U`) or `^F` (^D) scroll up (half) or down (half) page
* `H` `M` `L` move to the top/middle/bottom of the window
* `mA` then `'A` jump there (downcase letter a can jump only on current buffer),
  `:marks` gives the jump location, two ' `''` is jump back, `'.` jump to last
  change
* `%` jump closing brackets
* `5G` or `:5` goes to the line 5
* `gg` goes top, `G` goes bottom
* `g,` and `g;` jump to next/prev change on current buffer
* `:set scrollbind` in two buffers will make them scroll simultaneously

# Motions and selections

* `ciw` change inner word, `caw` including spaces that follows the word
  * `ca]` change all inside brackets including both [ ]
* `daw` removes the inner word
* `vit` inner or `vat` outer (including tag) visual select tag `:h tag-blocks`
  * repeat `at` to select wraped tag
  * jump with `o` more on `:help visual-operators` `:help v_it`
  * `vap` select paragraph (until next empty line, including that empty line)
  * `dst` delete surround tag with vim surround plugin
* `dt ` delete until the space, `df ` delete until the space including space
* `va'` visually select all inside ' including '
* `cgn` change visually selected text using previous search
* `:edit .` (short `:e.`) opens (`:vsp`) splits netrw of folder,
  `:Explore`(short `:E`) `:Vex` of current editing file, `%` create new file
  in current directory
* `gv` to select previous selected visual area
* `dap}p` switch two paragraph
* `dE` removes to the End of the string
* recording macro to q with `qq`, exit with `q`, run with `@q`
* paste commands in insert mode with `^Rq`
* `^T` indent in insert mode

# Searching

* `:grep subject -R * --exclude-dir={log,spec,public,features,tmp,vendor,assets,db} -I`
* grep end of the word `/usan\>` help with `:h /\>`
* `:%s/old/new/gc`
* `q:` shows history of commands
* `q/` shows history of searches
* `:argdo %s/foo/bar/ge | update`  replace in all arg
* `:set nowrapscan` is usefull when you want to stop search when you hit bottom
  of a file. With `gg` you can jump to begging. `:set wrapscan` when you want to
  back to wrapped search
* clear highlights until nex search `:noh`, to clear completely `set nohlsearch`
  or toggle `nnoremap <F3> :set hlsearch!<CR>`

# Windows buffers and tabs

* `:tabe file` open file in new tab, `gt` switch between tabs
* `:help Ctrl-W_T` move current buffer in new tab, Disable default Terminal ->
Preferences -> Shortcuts
* `gx` open link under cursor with `gnome-open`
* `:vsp #1`  vertically split window with file #1
* `:on` or `Ctrl+W+o` closes all windord except current
* `:buffers`, `:b1`, `:bun` closes the buffer
* `CTRL+^` (shift+6) jump to previous buffer
* `retab` this will actually reformat all source
* `ctrl+w+f` is the same as `gf` but opens in new vertical split window
* `b substring_of_filename` open buffer that matches substring (press tab in
  case of multiple mathces)

# Copy paste

* `"+y` copy visual selection to system clipboard, ubuntu should run `sudo
  apt-get install vim-gtk`. You can select which register to use with `"add`
  `"ap"
* `%y+` copy all lines to clipboard

# Completion

* `^n` or `^p` in insert mode to autocomplete strings
* `^x^n` only strings from current file
* `^x^f` to complete filename (keep `^x^f` when you navigate subfolders)
* `^x^]` for tags find other shortcuts with `:help ins-completion`

# Usefull commands

* Repeat last colon command `@:`, repeat last command `@@`
* `:args app/*/*`  to add all files to arg list
* `:nnoremap _ f_x~` find next _, remove and uppercase
  [link](http://vim.wikia.com/wiki/Converting_variables_to_or_from_camel_case)
  for moving underscore to CamelCase
* `gq` in visual mode will format text to 80 char lines (good for markdown)
* using vim inside irb or rails console with gem
  [interactive_editor](https://github.com/jberkel/interactive_editor). Its
  usefull since you can paste only limited number of chars to irb line. Now you
  can write your input data in file/ruby code and insert byebug/debugger/pry in
  rails code, and start hunting for bugs
* `set showcmd` enable showing all keys that I'm typing in bottom right corner,
  very usefull when explaining to someone
* snippet `nnoremap ,html :-1read $HOME/.vim/.skeleton.html<CR>3jwf>a` [my
snippets](https://github.com/duleorlovic/config/tree/master/vim/snippets)

# Books, videos tutorials

* <http://learnvimscriptthehardway.stevelosh.com/>
* <https://www.youtube.com/watch?v=5r6yzFEXajQ>
* [--noplugin](https://www.youtube.com/watch?v=XA2WjJbmmoM)

  ~~~
  # fuzzy finder
  set path+=**
  find *-vim #
  ~~~

  ~~~
  # ctags
  # need to generate tags file with `ctags -R .`
  # since I override Ctrl+] to be page up, run `pkill xbindkeys first`
  ^] # jump to tag under cursos
  g] # list all ambiguous tags: same method could be defined in multiple classes
  ^t # jump back in tags stack
  ^x^] # autocomplete tags
  ~~~

# Syntastic checker

[syntastic](https://github.com/scrooloose/syntastic) vim plugin is great to
write your code. Just need to install external syntac checkers and they will be
eabled. `SyntasticInfo` can give you current checkers.

Here is my configuration for syntastic and vim
<https://github.com/duleorlovic/config/blob/master/vim/syntastic.vim>
You need to install this tools:

* Markdown `gem install mdl`
* Ruby, Rails `gem install rubocop`. To define quiet messges you can write in
  * [.rubocop.yml](https://github.com/duleorlovic/config/blob/master/.rubocop.yml)
    in $HOME or project root. To disable all write `.rubocop.yml`:

  ~~~
  AllCops:
    Exclude:
      - '**/*'
  ~~~

  * inline in comment `# rubocop:disable Metrics/AbcSize,
    Metrics/MethodLength`
  * define in `syntastic.vim`
    [g:syntastic_eruby_ruby_quiet_message](https://github.com/duleorlovic/config/blob/master/vim/syntastic.vim#L21)
  * fix `possibly useless use of a constant in void context` is with `.to_s`

* Javascript `npm install -g jscs jscs-angular` and create files [.jscs](
* json `npm install -g jsonlint` [link to issue](https://github.com/jaxbot/syntastic-react/issues/4)

  ~~~
  " .vimrc
  au BufRead,BufNewFile *.json set filetype=json
  let g:syntastic_json_checkers=['jsonlint']
  ~~~
* coffeescript `npm install -g coffeelint`

# Show dedented lines

When looking at large files in small window (I have 4 vim windows in my single
terminal window) than I want to see to which block current line belongs.

