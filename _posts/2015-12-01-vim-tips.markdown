---
layout: post
title: Vim
---

# My Vimrc

Good starting poing for **.vimrc** is  <http://vim.wikia.com/wiki/Example_vimrc>
You can find my <https://github.com/duleorlovic/config/blob/master/.vimrc>

# Plugins

Install [pathogen](https://github.com/tpope/vim-pathogen) and other interesting plugins:

~~~
mkdir -p ~/.vim/autoload ~/.vim/bundle && \
curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim

cd ~/.vim/bundle
git clone git://github.com/tpope/vim-rails.git # example: Rview
git clone git://github.com/tpope/vim-bundler.git # Bopen
git clone git://github.com/tpope/vim-fugitive.git # Gblame, Gbrowse
vim -u NONE -c "helptags vim-fugitive/doc" -c q
git clone git://github.com/tpope/vim-sensible.git # search before enter
git clone git://github.com/tpope/vim-cucumber.git # cucumber syntax highlight
git clone https://github.com/thoughtbot/vim-rspec.git # rspec shortcuts <Leader>tsla
git clone git://github.com/tpope/vim-endwise.git # auto insert end keyword
git clone https://github.com/alvan/vim-closetag.git # auto insert closing html tag( follow with > for new line)
git clone git://github.com/tpope/vim-surround.git # add tag `ysiw<em>` change `cst"` delete `ds"`. `S` in visual
git clone https://github.com/kchmck/vim-coffee-script.git # coffe files
git clone https://github.com/scrooloose/syntastic.git # syntax check jscs, rubocop
git clone https://github.com/bling/vim-airline ~/.vim/bundle/vim-airline # nice statusline
git clone git://github.com/tpope/vim-repeat.git # repeat some plugin commands
git clone https://github.com/tpope/vim-unimpaired.git # [l ]q [a ]<space>
git clone https://github.com/ctrlpvim/ctrlp.vim.git # <c-p> <c-j> <c-k> <c-f> <c-b> <c-v>
git clone https://github.com/othree/html5.vim # html5 indent correct
git clone git://github.com/digitaltoad/vim-pug.git # jade syntax highlight
# update with for b in `ls`;do echo $b;cd $b; git pull; cd -;done
~~~

Some not used anymore

~~~
# http://vimawesome.com/plugin/vim-rspec-sad-beautiful-tragic # :RunSpec
git clone git@github.com:Valloric/YouCompleteMe.git && cd YouCompleteMe && ./install.sh && cd -
# annoying O char waiting next input
git clone git://github.com/Townk/vim-autoclose # add closing `) } "`, in visual `<Leader>a(`
~~~

* start explorer Netrw

~~~
" http://modal.us/blog/2013/07/27/back-to-vim-with-nerdtree-nope-netrw/
" Toggle Vexplore with Ctrl-E
function! ToggleVExplorer()
  if exists("t:expl_buf_num")
      let expl_win_num = bufwinnr(t:expl_buf_num)
      if expl_win_num != -1
          let cur_win_nr = winnr()
          exec expl_win_num . 'wincmd w'
          close
          exec cur_win_nr . 'wincmd w'
          unlet t:expl_buf_num
      else
          unlet t:expl_buf_num
      endif
  else
      exec '1wincmd w'
      Vexplore
      let t:expl_buf_num = bufnr("%")
  endif
endfunction
map <silent> <C-E> :call ToggleVExplorer()<CR>

" Hit enter in the file browser to open the selected
" file with :vsplit to the right of the browser.
let g:netrw_browse_split = 4
let g:netrw_altv = 1

" Default to tree mode
let g:netrw_liststyle=3

" Change directory to the current buffer when opening files.
" set autochdir
" maybe is easier within netrw just press c  help :netrw-c
" that's better than 'cd ../path' which change in all tabs
~~~

Inside netrw:

* `%` create new file, more info `:help netrw-%`
* `d` create new directory
* `R` rename file/directory under cursor
* `D` delete file/directory under cursor

# Running ruby in vim and show in separate window

[link](http://vim.wikia.com/wiki/Preview_output_from_interpreter_in_new_window)
Press `F7` to run selected or all code. Shift + F7 close the window.

~~~
"save code, run ruby, show output in preview window
function! Ruby_eval_vsplit() range
  let src = tempname()
  let dst = tempname()
  execute ": " . a:firstline . "," . a:lastline . "w " . src
  execute ":silent ! ruby " . src . " > " . dst . " 2>&1 "
  execute ":pclose!"
  execute ":redraw!"
  execute ":vsplit"
  execute "normal \<C-W>l"
  execute ":e! " . dst
  execute ":set pvw"
  execute "normal \<C-W>h"
endfunction
vmap <silent> <F7> :call Ruby_eval_vsplit()<CR>
nmap <silent> <F7> mzggVG<F7>`z
imap <silent> <F7> <Esc><F7>a
map <silent> <S-F7> <C-W>l:bw<CR>
imap <silent> <S-F7> <Esc><S-F7>a
~~~

# Show ruby return values on each line in vim

Install [seeing_is_believing](https://github.com/JoshCheek/seeing_is_believing) with `gem install seeing_is_believing` and add plugin `cd ~/.vim/bundle && git clone https://github.com/hwartig/vim-seeing-is-believing` and add mappins:
`F4` mark, `F5` run (not in visual) and `enter` mark and run (not in insert mode)

~~~
" .vimrc Enable seeing-is-believing mappings only for Ruby
augroup seeingIsBelievingSettings
  autocmd!

  autocmd FileType ruby nmap <buffer> <Enter> <Plug>(seeing-is-believing-mark-and-run)
  autocmd FileType ruby xmap <buffer> <Enter> <Plug>(seeing-is-believing-mark-and-run)

  autocmd FileType ruby nmap <buffer> <F4> <Plug>(seeing-is-believing-mark)
  autocmd FileType ruby xmap <buffer> <F4> <Plug>(seeing-is-believing-mark)
  autocmd FileType ruby imap <buffer> <F4> <Plug>(seeing-is-believing-mark)

  autocmd FileType ruby nmap <buffer> <F5> <Plug>(seeing-is-believing-run)
  autocmd FileType ruby imap <buffer> <F5> <Plug>(seeing-is-believing-run)
augroup END
~~~

# Usefull commands

* [quick reference card](http://tnerual.eriogerg.free.fr/vimqrc.html)
* [tutorial](http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html)
* `CTRL+B` == `^B`
* `^B`(`^U`) or `^F` (^D) scroll up (half) or down (half) page
* `H` `M` `L` move to the top/middle/bottom of the window
* `ciw` hange inner word, `caw` including spaces, `ca]` change all inside brackets including [ ]
* `dt ` delete until the space, `df ` delete until the space including space
* `va'` visually select all inside ' including '
* `cgn` change visually selected text using previous search
* `:edit .` (short `:e.`) opens (`:vsp`) splits netrw of folder,
  `:Explore`(short `:E`) `:Vex` of current editing file, `%` create new file
  in current directory
* `gv` to select previous selected visual area
* `+` and `-` move on the first letter up and down, { and } move on paragraph
* `dap}p` switch two paragraph
* Repeat last colon command  @:  and @@
* :grep subject -R * --exclude-dir={log,spec,public,features,tmp,vendor,assets,db} -I
* `Ctrl+p`  # in insert mode is completing the string
* dE # removes to the End of the string
* daw removes the inner word
* yy
* :%s/old/new/gc
* mA then 'A jump there (downcase letter a can jump only on current buffer), :marks gives the jump location, '' is jump back, '. jump to last change
* :tabe file  open file in new tab, gt switch between tabs
* :vsp #1  vertically split window with file #1
* :on or Ctrl+W+o #closes all windord except current
* :buffers, :b1, :bun closes the buffer
* q: shows history of commands
* q/ shows history of searches
* 5G or :5 goes to the line 5
* gg goes top, G goes bottom
* g, and g; jump to next/prev change on current buffer
* :args app/*/*  to add all files to arg list
* :argdo %s/foo/bar/ge | update   replace in all arg
* find /home/bruno/old-friends -type f -exec sed -i 's/ugly/beautiful/g' {} \;
* CTRL+^ (shift+6) jump to previous buffer  
* :set tabstop=2 shiftwidth=2 expandtab # set configuration
* retab # this will actually reformat all source
* `"+y` copy visual selection to system clipboard, ubuntu should run `sudo apt-get install vim-gtk`
* `vit` inner or `vat` outer visual select tag, jump with `o` more on `:help visual-operators` `:help v_it`
* :help Ctrl-W_T open current buffer in new tab
* `%y+` copy all lines to clipboard
* `:nnoremap _ f_x~` find next _, remove and uppercase
  [link](http://vim.wikia.com/wiki/Converting_variables_to_or_from_camel_case)
  for moving underscore to CamelCase
* `gq` in visual mode will format text to 80 char lines (good for markdown)

* using vim inside irb or rails console with gem [interactive_editor](https://github.com/jberkel/interactive_editor). Its usefull since you can paste only limited number of chars to irb line. Now you can write your input data in file/ruby code and insert byebug/debuger/pry in rails code, and start hunting for bugs 

* videos
* <https://www.youtube.com/watch?v=5r6yzFEXajQ>

# Syntastic checker

[syntastic](https://github.com/scrooloose/syntastic) vim plugin is great to
write your code. Just need to install external syntac checkers and they will be
eabled. `SyntasticInfo` can give you current checkers.

Here is my configuration for syntastic and vim
<https://github.com/duleorlovic/config/blob/master/vim/syntastic.vim>
You need to install this tools:

* Markdown `gem install mdl`
* Ruby, Rails `gem install rubocop`. Define quiet messages in
  [.rubocop.yml](https://github.com/duleorlovic/config/blob/master/.rubocop.yml)
  in $HOME or project root, or inline in comment `# rubocop:disable
  Metrics/AbcSize, Metrics/MethodLength` or in `syntastic.vim`
  [g:syntastic_eruby_ruby_quiet_message]()
* Javascript `npm install -g jscs jscs-angular` and create files [.jscs](
* json `npm install -g jsonlint` [link to issue](https://github.com/jaxbot/syntastic-react/issues/4)

  ~~~
  " .vimrc
  au BufRead,BufNewFile *.json set filetype=json
  let g:syntastic_json_checkers=['jsonlint']
  ~~~
* coffeescript `npm install -g coffeelint`
